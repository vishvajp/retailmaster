import React, { useState, useEffect, useRef } from "react";
import humanBodyFront from "./images/Full-body-front.png";
import humanBodyBack from "./images/Full-body-back.png";
import skeletonFront from "./images/Screenshot_2.jpg";
import skeletonBack from "./images/Screenshot_1.jpg";
import headImage from "./images/18783.jpg";
import stomacImage from "./images/osiy_zwzu_230524.jpg";
import spineImage from "./images/SpineImage.jpg";
import "bootstrap/dist/css/bootstrap.min.css";
import "./BodyMap.css";
import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";

// Muscular System Parts
const muscularFrontParts = [
  {
    name: "Head (Frontal)",
    coords:
      "261,23,252,25,245,30,240,38,240,53,243,72,245,81,256,92,270,92,283,81,283,72,287,53,285,38,280,30,273,25",
    detailImage: headImage,
    detailParts: [
      {
        name: "Left Eye",
        coords:
          "83,194,87,199,95,201,102,201,107,201,111,200,115,199,118,197,123,197,124,196,124,195,123,194,121,193,119,192,116,190,113,188,109,187,105,187,100,187,96,188,93,189,90,190,87,191",
      },
      {
        name: "Right Eye",
        coords:
          "175,196,175,194,177,194,180,192,185,189,189,187,200,187,205,188,210,190,214,192,217,194,213,197,208,199,203,200,196,201,190,201,185,199,181,197,",
      },
    ],
  },
  { name: "Neck", coords: "247,84,247,113,282,113,282,82,271,91,258,91" },
  {
    name: "Left Shoulder",
    coords: "247,91,235,100,221,110,217,112,219,114,224,114,249,113",
  },
  {
    name: "Right Shoulder",
    coords: "283,89,307,106,316,111,323,114,293,113,290,112,282,112,",
  },
  {
    name: "Stomach",
    coords:
      "223,175,224,186,225,204,224,210,223,217,223,232,306,233,306,221,305,215,305,207,306,202,308,195,308,190,308,173,301,169,295,166,289,165,282,164,277,163,264,162,259,163,253,166,247,167,239,168,231,171,226,175,225,175",
    detailImage: stomacImage,
    detailParts: [
      {
        name: "Liver",
        coords:
          "99,205,138,205,158,205,162,206,166,207,168,210,169,213,170,215,169,217,169,219,168,221,166,223,162,225,158,227,150,230,145,230,139,231,132,232,127,233,121,234,117,236,113,238,112,239,110,242,108,244,108,246,107,246,105,248,102,250,99,250,97,251,95,252,93,253,92,254,91,253,89,250,87,246,86,240,85,234,84,228,84,219,84,216,85,214,87,211,89,209,91,208,94,206,97,205",
      },
    ],
  },
  {
    name: "Pelvic Girdle",
    coords:
      "222,233,228,235,234,240,237,244,244,249,248,254,261,280,264,288,266,290,269,289,283,275,286,268,290,258,293,251,296,248,299,244,303,240,306,234",
  },
];

const muscularBackParts = [
  {
    name: "Gluteus Left",
    coords:
      "235,241,236,245,233,249,232,253,231,271,231,277,232,285,234,292,236,296,242,301,251,304,259,303,266,298,272,288,273,276,271,269,267,262,263,258,251,249,",
  },
  {
    name: "Gluteus Right",
    coords:
      "312,238,305,244,296,251,289,256,283,263,279,270,275,278,274,286,271,295,274,297,279,299,284,302,292,303,299,303,305,299,311,292,313,290,314,250",
  },
  {
    name: "Spine",
    coords:
      "268,75,268,83,266,87,265,94,260,103,260,130,262,133,264,138,264,144,264,153,263,159,262,171,261,187,262,193,263,195,264,199,266,204,267,211,267,220,269,224,269,235,269,243,270,252,271,260,274,263,275,266,278,263,279,259,281,255,281,251,281,249,280,240,280,226,278,216,277,211,276,206,275,200,274,194,274,182,274,174,274,162,274,154,275,143,275,136,275,125,275,112,275,105,276,98,276,92,276,88,275,86,275,79,276,75",
    detailImage: spineImage,
    detailParts: [
      {
        name: "Cervical Vertebrae",
        coords:
          "132,19,132,17,135,16,146,16,148,15,151,13,153,11,155,11,157,11,159,12,160,13,162,12,164,11,166,10,169,12,170,14,172,15,172,17,171,19,169,21,166,21,163,20,159,20,155,20,152,20,150,21,148,22,146,21,145,20,144,20,141,21,139,22,136,22,133,21,131,20",
      },
      {
        name: "Thoracic Vertebrae",
        coords:
          "132,29,133,26,136,25,139,24,147,24,149,23,150,21,152,20,157,20,160,20,161,21,167,21,168,22,169,24,167,27,170,29,172,32,171,34,170,35,168,35,166,35,165,34,164,33,162,32,159,32,156,32,155,33,153,33,151,33,150,32,148,31,146,31,144,31,141,31,139,32,137,33,134,33,133,31",
      },
    ],
  },
];

// Skeletal System Parts
const skeletalFrontParts = [
  {
    name: "Skull",
    coords:
      "260,20,250,25,240,35,235,50,235,70,240,85,255,95,270,95,285,85,290,70,290,50,285,35,275,25",
    detailImage: headImage,
    detailParts: [
      {
        name: "Frontal Bone",
        coords:
          "83,194,87,199,95,201,102,201,107,201,111,200,115,199,118,197,123,197,124,196,124,195,123,194,121,193,119,192,116,190,113,188,109,187,105,187,100,187,96,188,93,189,90,190,87,191",
      },
      {
        name: "Maxilla",
        coords:
          "175,196,175,194,177,194,180,192,185,189,189,187,200,187,205,188,210,190,214,192,217,194,213,197,208,199,203,200,196,201,190,201,185,199,181,197,",
      },
    ],
  },
  {
    name: "Cervical Vertebrae",
    coords: "250,90,250,120,260,120,260,90",
    detailImage: spineImage,
    detailParts: [
      {
        name: "Atlas (C1)",
        coords: "250,90,250,100,260,100,260,90",
      },
      {
        name: "Axis (C2)",
        coords: "250,100,250,110,260,110,260,100",
      },
      {
        name: "C3-C7",
        coords: "250,110,250,120,260,120,260,110",
      },
    ],
  },
  {
    name: "Clavicle (Left)",
    coords: "250,90,230,100,220,110",
  },
  {
    name: "Clavicle (Right)",
    coords: "260,90,280,100,290,110",
  },
  {
    name: "Scapula (Left)",
    coords:
      "220,110,215,120,220,130,230,140,235,150,240,160,230,160,225,150,220,140,215,130,210,120",
  },
  {
    name: "Scapula (Right)",
    coords:
      "290,110,295,120,290,130,280,140,275,150,270,160,280,160,285,150,290,140,295,130,300,120",
  },
  {
    name: "Humerus (Left)",
    coords: "220,110,215,130,210,150,205,170,200,190,195,210",
  },
  {
    name: "Humerus (Right)",
    coords: "290,110,295,130,300,150,305,170,310,190,315,210",
  },
  {
    name: "Ribs",
    coords:
      "230,120,230,150,240,160,250,165,270,165,280,160,290,150,290,120,280,110,270,105,260,100,250,100,240,110",
    detailImage: spineImage,
    detailParts: [
      {
        name: "True Ribs (1-7)",
        coords:
          "230,120,230,140,240,150,250,155,270,155,280,150,290,140,290,120",
      },
      {
        name: "False Ribs (8-12)",
        coords:
          "230,140,230,150,240,160,250,165,270,165,280,160,290,150,290,140",
      },
    ],
  },
  {
    name: "Sternum",
    coords: "250,120,250,165,270,165,270,120",
  },
  {
    name: "Radius & Ulna (Left)",
    coords:
      "195,210,190,220,185,230,180,240,175,250,170,260,165,270,160,280,155,290",
  },
  {
    name: "Radius & Ulna (Right)",
    coords:
      "315,210,320,220,325,230,330,240,335,250,340,260,345,270,350,280,355,290",
  },
  {
    name: "Pelvis",
    coords:
      "240,230,240,260,260,280,280,260,280,230,270,220,260,215,250,220,240,230",
    detailImage: spineImage,
    detailParts: [
      {
        name: "Ilium",
        coords: "240,230,240,250,260,270,280,250,280,230",
      },
      {
        name: "Ischium",
        coords: "240,250,240,260,260,280,280,260,280,250",
      },
      {
        name: "Pubis",
        coords: "260,215,250,220,240,230,270,220,280,230,260,230",
      },
    ],
  },
  {
    name: "Femur (Left)",
    coords: "260,280,255,300,250,320,245,340,240,360,235,380",
  },
  {
    name: "Femur (Right)",
    coords: "260,280,265,300,270,320,275,340,280,360,285,380",
  },
  {
    name: "Tibia & Fibula (Left)",
    coords: "235,380,230,400,225,420,220,440,215,460,210,480",
  },
  {
    name: "Tibia & Fibula (Right)",
    coords: "285,380,290,400,295,420,300,440,305,460,310,480",
  },
];

const skeletalBackParts = [
  {
    name: "Skull (Occipital)",
    coords:
      "265,20,255,25,245,35,240,50,240,70,245,85,260,95,275,95,290,85,295,70,295,50,290,35,280,25",
    detailImage: headImage,
    detailParts: [
      {
        name: "Occipital Bone",
        coords:
          "83,194,87,199,95,201,102,201,107,201,111,200,115,199,118,197,123,197,124,196,124,195,123,194,121,193,119,192,116,190,113,188,109,187,105,187,100,187,96,188,93,189,90,190,87,191",
      },
      {
        name: "Parietal Bones",
        coords:
          "175,196,175,194,177,194,180,192,185,189,189,187,200,187,205,188,210,190,214,192,217,194,213,197,208,199,203,200,196,201,190,201,185,199,181,197,",
      },
    ],
  },
  {
    name: "Vertebral Column",
    coords:
      "271,73,280,74,282,75,283,75,283,77,283,79,284,81,284,85,283,91,286,95,286,97,284,101,284,141,285,164,285,192,284,224,283,239,286,241,288,243,289,245,288,246,289,248,290,250,290,252,288,254,285,257,282,258,280,259,279,259,279,261,280,262,278,263,277,264,276,266,274,267,271,267,270,264,268,263,268,261,267,259,265,258,263,257,261,257,259,254,256,251,256,249,256,246,258,243,262,240,263,238,263,233,257,226,259,96,261,93,262,76,263,74",
    detailImage: spineImage,
    detailParts: [
      {
        name: "Cervical Vertebrae 1",
        coords:
          "132,19,132,17,135,16,146,16,148,15,151,13,153,11,155,11,157,11,159,12,160,13,162,12,164,11,166,10,169,12,170,14,172,15,172,17,171,19,169,21,166,21,163,20,159,20,155,20,152,20,150,21,148,22,146,21,145,20,144,20,141,21,139,22,136,22,133,21,131,20",
      },
      {
        name: "cervical Vertebrae 2",
        coords:
          "132,29,133,26,136,25,139,24,147,24,149,23,150,21,152,20,157,20,160,20,161,21,167,21,168,22,169,24,167,27,170,29,172,32,171,34,170,35,168,35,166,35,165,34,164,33,162,32,159,32,156,32,155,33,153,33,151,33,150,32,148,31,146,31,144,31,141,31,139,32,137,33,134,33,133,31",
      },
      {
        name: "cervical Vertebrae 3",
        coords:
          "145,33,150,33,152,31,154,33,157,34,160,34,162,35,164,36,168,36,169,37,172,37,172,38,171,40,172,42,170,42,168,42,165,42,163,41,161,40,158,40,157,41,155,41,153,43,151,42,149,41,147,40,144,40,142,41,139,42,137,42,135,41,135,39,136,38,139,37,142,35,144,33",
      },
      {
        name: "cervical Vertebrae 4",
        coords:
          "135,45,137,44,140,44,142,43,144,42,146,41,148,41,151,41,153,43,154,43,155,42,157,41,159,41,163,41,165,41,166,42,167,43,169,43,171,43,172,44,172,48,172,52,171,52,169,51,166,50,162,50,159,49,158,48,156,48,155,49,153,50,151,49,149,48,147,47,145,48,142,49,139,49,136,48,135,48",
      },
      {
        name: "cervical Vertebrae 5",
        coords:
          "134,51,135,50,136,50,138,50,139,51,143,50,145,49,147,48,149,48,151,48,152,48,154,49,155,51,156,51,159,51,162,51,165,51,167,52,172,54,172,55,172,57,172,61,170,61,165,60,162,58,158,58,156,58,154,57,152,57,151,56,148,55,145,56,142,56,138,56,135,55,133,54,133,50",
      },
      {
        name: "cervical Vertebrae 6",
        coords:
          "131,57,133,57,135,57,143,57,145,56,148,55,151,55,153,57,155,58,155,60,158,60,163,60,168,62,171,62,172,68,170,68,167,68,163,67,159,66,153,64,151,63,149,63,145,62,144,62,144,61,140,61,137,61,134,61,131,60",
      },
      {
        name: "cervical Vertebrae 7",
        coords:
          "131,63,134,63,137,63,142,63,144,63,145,62,147,62,150,62,151,63,152,64,154,64,156,65,163,68,169,70,170,70,170,75,168,75,166,75,164,75,161,74,157,73,153,71,150,71,148,71,146,70,145,69,144,68,142,68,138,68,132,68,131,67,130,66",
      },
      {
        name: "Thoraic Vertebrae 1",
        coords:
          "123,76,124,73,126,72,129,72,136,72,137,72,137,71,138,70,139,68,141,68,144,68,146,70,148,73,151,73,160,75,167,76,168,79,166,80,165,81,165,83,165,83,163,84,160,84,156,84,154,84,152,83,149,82,146,82,143,81,142,81,141,82,140,83,137,83,136,82,135,80,136,79,138,79,140,78,141,77,140,76,139,77,136,77,133,77,131,79,129,80,127,80,125,80,123,78",
      },

      {
        name: "Thoraic Vertebrae 2",
        coords:
          "121,92,120,89,122,87,124,86,125,85,128,85,129,86,132,86,133,85,136,84,138,83,140,84,142,85,143,85,144,86,144,84,145,83,147,83,150,84,157,85,161,86,164,86,164,87,162,90,162,92,162,96,142,95,141,91,139,91,137,92,134,95,132,96,127,95,128,93,128,91,126,91,125,93,122,93",
      },
      {
        name: "Thoraic Vertebrae 3",
        coords:
          "115,101,116,99,118,97,121,96,124,96,126,97,128,98,130,98,132,97,134,97,136,98,138,100,138,98,139,97,141,97,146,97,156,98,160,99,161,101,160,102,158,104,156,109,136,109,135,108,135,105,133,105,131,106,129,108,127,108,124,107,124,104,122,105,115,104",
      },
      {
        name: "Thoraic Vertebrae 4",
        coords:
          "109,118,109,117,109,114,110,112,113,110,114,109,116,108,119,109,121,111,123,109,126,109,127,111,131,113,134,114,133,110,135,110,154,111,155,113,155,115,153,116,150,119,150,122,133,122,130,122,130,120,130,119,127,120,123,123,120,123,120,121,120,120,122,119,120,118,119,117,117,117,114,118,109,118",
      },
      {
        name: "Thoraic Vertebrae 5",
        coords:
          "104,134,104,132,105,130,107,127,109,125,111,124,115,124,118,123,120,122,122,123,127,126,128,126,129,123,143,124,144,124,149,124,150,126,149,129,147,131,146,134,139,134,137,135,132,135,130,134,126,134,123,136,119,136,118,135,118,134,120,133,120,132,117,132,115,132,111,132,109,134,107,135,104,134",
      },
      {
        name: "Thoraic Vertebrae 6",
        coords:
          "105,150,102,150,101,149,101,144,103,144,105,140,108,139,115,139,115,138,120,138,122,140,124,140,124,136,130,136,132,136,144,136,146,136,146,139,145,139,145,144,146,146,143,147,140,147,138,147,136,148,134,148,132,149,130,150,123,148,122,147,120,151,117,153,114,152,113,150,114,148,115,147,115,146,113,146,110,147,108,149,",
      },
      {
        name: "Thoraic Vertebrae 7",
        coords:
          "104,165,100,164,100,161,100,155,103,152,108,153,111,153,113,155,115,155,115,154,123,154,122,151,133,151,134,150,137,150,138,149,144,149,144,152,143,153,144,158,142,160,138,162,133,162,129,162,125,161,123,162,120,166,118,167,114,167,114,164,116,163,116,162,112,162,109,164",
      },
      {
        name: "Thoraic Vertebrae 8",
        coords:
          "103,176,103,173,105,170,107,169,111,168,117,168,118,168,118,166,121,166,123,168,125,168,125,165,127,164,135,164,140,163,146,162,147,166,151,170,146,173,141,175,135,177,131,178,126,177,125,179,124,181,120,181,119,180,119,176,119,175,117,175,115,177,111,179,107,180,103,176",
      },
      {
        name: "Thoraic Vertebrae 9",
        coords:
          "106,191,106,187,108,184,123,184,124,182,126,181,129,181,129,179,133,179,137,178,142,177,150,174,151,174,152,179,153,182,150,183,143,188,136,190,134,189,133,189,129,192,126,195,123,195,123,192,123,190,123,188,118,191,113,194,109,194,106,191",
      },
      {
        name: "Thoraic Vertebrae 10",
        coords:
          "112,204,111,200,113,198,117,195,123,194,126,194,128,194,129,192,130,191,132,192,135,193,137,192,153,185,155,185,156,189,158,192,161,194,158,195,157,196,156,198,155,198,153,198,147,202,144,202,138,203,136,205,134,206,132,205,132,203,132,201,130,201,128,201,126,202,119,208,117,208,114,207",
      },
      {
        name: "Thoraic Vertebrae 11",
        coords:
          "117,215,117,210,119,208,121,208,133,208,135,206,137,206,140,206,143,207,143,204,146,203,150,202,162,197,163,196,165,197,165,200,166,202,169,204,168,206,165,209,160,212,153,214,149,215,142,214,141,216,138,216,135,215,133,214,132,215,124,219,121,219,118,217",
      },
      {
        name: "Thoraic Vertebrae 12",
        coords:
          "122,226,122,223,125,221,127,219,129,219,135,220,140,221,140,219,141,218,144,218,146,219,148,220,151,221,151,218,152,217,156,215,164,212,170,208,172,208,173,209,175,214,176,216,177,217,176,218,174,219,172,221,166,225,161,227,154,228,150,227,147,227,143,227,140,226,139,226,137,226,134,227,130,229,127,230,125,229,122,228,122,225",
      },
      {
        name: "Lumbar 1",
        coords:
          "123,235,123,232,125,230,127,230,130,230,143,233,144,231,147,230,149,231,151,231,154,233,156,233,156,230,158,228,162,228,178,221,181,222,181,224,181,228,182,230,183,233,171,238,163,243,159,243,159,242,157,242,155,243,151,241,145,240,127,241,126,240,124,238,123,237,",
      },
      {
        name: "Lumbar 2",
        coords:
          "128,253,128,251,131,248,133,248,143,248,144,245,146,243,149,243,152,243,154,244,160,247,161,245,163,244,168,243,174,241,180,238,187,237,188,239,187,242,186,244,187,249,188,251,189,254,188,254,186,253,182,253,180,254,177,257,172,258,163,259,163,255,157,260,153,258,153,256,153,255,151,255,148,255,144,255,141,256,137,257,132,258,130,257,128,256",
      },
      {
        name: "Lumbar 3",
        coords:
          "129,264,129,262,131,260,132,259,134,258,138,259,140,260,145,263,147,263,147,260,148,259,149,257,151,257,153,258,155,260,158,263,159,264,163,264,163,262,164,260,176,260,179,259,182,257,187,257,189,258,190,260,189,262,188,263,188,272,189,274,189,275,186,275,184,275,182,276,180,276,177,276,173,276,169,275,165,274,164,275,162,275,162,271,156,272,155,273,149,271,147,270,132,270,130,268,128,263",
      },
      {
        name: "Lumbar 4",
        coords:
          "127,279,127,276,129,274,131,273,133,273,135,274,146,278,146,274,148,272,151,272,153,273,156,275,160,279,162,279,162,276,164,276,173,278,175,278,180,278,183,278,186,278,188,280,188,282,185,286,185,288,185,295,185,297,178,295,161,290,159,291,159,287,154,287,152,287,149,289,147,289,145,288,145,285,130,286,128,284,127,282",
      },
      {
        name: "Lumbar 5",
        coords:
          "121,301,121,297,123,295,124,292,127,292,130,292,133,293,135,296,139,296,142,296,142,295,142,293,142,291,144,290,146,289,148,288,150,289,151,291,156,295,159,296,159,293,161,292,163,293,178,297,185,299,186,299,186,301,185,303,183,305,181,307,181,309,181,313,178,313,173,311,166,308,160,305,158,305,153,305,147,306,142,308,140,309,136,308,136,305,136,304,132,305,130,306,127,307,124,307,122,305,121,303",
      },

      {
        name: "Sacrum",
        coords:
          "118,315,118,312,119,310,121,309,123,308,126,309,128,309,131,311,134,312,142,312,143,310,146,307,149,306,154,306,160,307,165,309,174,314,177,316,177,319,177,323,179,324,179,328,178,330,175,332,164,333,161,334,158,336,155,340,154,343,151,345,146,349,142,350,137,351,135,353,132,357,130,362,128,367,126,369,118,368,118,365,117,356,115,352,115,350,112,349,111,346,111,343,113,341,113,340,112,338,112,335,113,333,116,330,119,328,121,327,129,327,129,326,122,321,118,317,118,316,118,312",
      },
      {
        name: "Coccyx",
        coords:
          "117,367,127,368,124,375,121,381,120,383,121,385,121,388,122,390,119,391,116,390,112,385,111,384,111,383,111,381,112,378,116,372,",
      },
    ],
  },
  {
    name: "Scapula (Left)",
    coords:
      "230,100,220,120,225,140,235,150,245,160,235,170,225,160,220,150,215,140,210,130",
  },
  {
    name: "Scapula (Right)",
    coords:
      "300,100,310,120,305,140,295,150,285,160,295,170,305,160,310,150,315,140,320,130",
  },
  {
    name: "Humerus (Left)",
    coords: "220,110,215,130,210,150,205,170,200,190,195,210",
  },
  {
    name: "Humerus (Right)",
    coords: "290,110,295,130,300,150,305,170,310,190,315,210",
  },
  {
    name: "Ribs (Posterior)",
    coords: "230,120,230,150,240,160,250,165,270,165,280,160,290,150,290,120",
  },
  {
    name: "Pelvis (Posterior)",
    coords:
      "245,230,245,260,265,280,285,260,285,230,275,220,265,215,255,220,245,230",
  },
  {
    name: "Femur (Left)",
    coords: "265,280,260,300,255,320,250,340,245,360,240,380",
  },
  {
    name: "Femur (Right)",
    coords: "265,280,270,300,275,320,280,340,285,360,290,380",
  },
  {
    name: "Tibia & Fibula (Left)",
    coords: "240,380,235,400,230,420,225,440,220,460,215,480",
  },
  {
    name: "Tibia & Fibula (Right)",
    coords: "290,380,295,400,300,420,305,440,310,460,315,480",
  },
];

const FullAnatomicalMap = () => {
  const [selectedParts, setSelectedParts] = useState({
    muscular: { main: [], detail: [] },
    skeletal: { main: [], detail: [] },
  });

  const [viewMode, setViewMode] = useState("front");
  const [highlightedMainPart, setHighlightedMainPart] = useState(null);
  const [highlightedDetailPart, setHighlightedDetailPart] = useState(null);
  const [showDetailView, setShowDetailView] = useState(false);
  const [detailImage, setDetailImage] = useState(null);
  const [detailParts, setDetailParts] = useState([]);
  const [system, setSystem] = useState("muscular");
  const [selectedDropdownPart, setSelectedDropdownPart] = useState("");
  const [notes, setNotes] = useState("");
  const [savedParts, setSavedParts] = useState([]);

  useEffect(() => {
    const storedParts = localStorage.getItem("savedBodyParts");
    if (storedParts) {
      setSavedParts(JSON.parse(storedParts));
    }
  }, []);

  const {
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition,
    transcript: rawTranscript,
  } = useSpeechRecognition();

  const [manualInput, setManualInput] = useState("");
  const [speechInput, setSpeechInput] = useState("");

  useEffect(() => {
    if (!listening) {
      setSpeechInput((prev) => prev + " " + rawTranscript);
    }
  }, [rawTranscript, listening]);

  useEffect(() => {
    if (!listening) {
      setManualInput(speechInput);
    }
  }, [speechInput, listening]);

  const handleManualInputChange = (e) => {
    setManualInput(e.target.value);
  };

  if (!browserSupportsSpeechRecognition) {
    return <span>Browser doesn't support speech recognition.</span>;
  }

  const handleSubmit = () => {
    const partsToSave = {
      timestamp: new Date().toISOString(),
      muscular: {
        front: {
          mainParts: selectedParts.muscular.main
            .filter((partName) =>
              muscularFrontParts.some((p) => p.name === partName)
            )
            .map((partName) => {
              const part = muscularFrontParts.find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
                detailImage: part?.detailImage || null,
              };
            }),
          detailParts: selectedParts.muscular.detail
            .filter((partName) =>
              muscularFrontParts
                .flatMap((p) => p.detailParts || [])
                .some((dp) => dp.name === partName)
            )
            .map((partName) => {
              const part = muscularFrontParts
                .flatMap((p) => p.detailParts || [])
                .find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
              };
            }),
        },
        back: {
          mainParts: selectedParts.muscular.main
            .filter((partName) =>
              muscularBackParts.some((p) => p.name === partName)
            )
            .map((partName) => {
              const part = muscularBackParts.find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
                detailImage: part?.detailImage || null,
              };
            }),
          detailParts: selectedParts.muscular.detail
            .filter((partName) =>
              muscularBackParts
                .flatMap((p) => p.detailParts || [])
                .some((dp) => dp.name === partName)
            )
            .map((partName) => {
              const part = muscularBackParts
                .flatMap((p) => p.detailParts || [])
                .find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
              };
            }),
        },
      },
      skeletal: {
        front: {
          mainParts: selectedParts.skeletal.main
            .filter((partName) =>
              skeletalFrontParts.some((p) => p.name === partName)
            )
            .map((partName) => {
              const part = skeletalFrontParts.find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
                detailImage: part?.detailImage || null,
              };
            }),
          detailParts: selectedParts.skeletal.detail
            .filter((partName) =>
              skeletalFrontParts
                .flatMap((p) => p.detailParts || [])
                .some((dp) => dp.name === partName)
            )
            .map((partName) => {
              const part = skeletalFrontParts
                .flatMap((p) => p.detailParts || [])
                .find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
              };
            }),
        },
        back: {
          mainParts: selectedParts.skeletal.main
            .filter((partName) =>
              skeletalBackParts.some((p) => p.name === partName)
            )
            .map((partName) => {
              const part = skeletalBackParts.find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
                detailImage: part?.detailImage || null,
              };
            }),
          detailParts: selectedParts.skeletal.detail
            .filter((partName) =>
              skeletalBackParts
                .flatMap((p) => p.detailParts || [])
                .some((dp) => dp.name === partName)
            )
            .map((partName) => {
              const part = skeletalBackParts
                .flatMap((p) => p.detailParts || [])
                .find((p) => p.name === partName);
              return {
                name: partName,
                coords: part?.coords || "",
              };
            }),
        },
      },
      notes: manualInput,
    };

    const updatedSavedParts = [...savedParts, partsToSave];
    localStorage.setItem("savedBodyParts", JSON.stringify(updatedSavedParts));
    setSavedParts(updatedSavedParts);

    // Clear the selection after saving
    setSelectedParts({
      muscular: { main: [], detail: [] },
      skeletal: { main: [], detail: [] },
    });
    setHighlightedMainPart(null);
    setHighlightedDetailPart(null);
    setShowDetailView(false);
    setDetailImage(null);
    setDetailParts([]);
    setManualInput("");
    setSpeechInput("");

    alert("Selection saved successfully!");
  };

  const clearSavedParts = () => {
    localStorage.removeItem("savedBodyParts");
    setSavedParts([]);
  };

  // Function to check if a part is in the saved parts
  const isPartSaved = (partName) => {
    return savedParts.some((part) => {
      // Check muscular system
      if (part.muscular) {
        if (part.muscular.front?.mainParts.some((p) => p.name === partName))
          return true;
        if (part.muscular.front?.detailParts.some((p) => p.name === partName))
          return true;
        if (part.muscular.back?.mainParts.some((p) => p.name === partName))
          return true;
        if (part.muscular.back?.detailParts.some((p) => p.name === partName))
          return true;
      }

      // Check skeletal system
      if (part.skeletal) {
        if (part.skeletal.front?.mainParts.some((p) => p.name === partName))
          return true;
        if (part.skeletal.front?.detailParts.some((p) => p.name === partName))
          return true;
        if (part.skeletal.back?.mainParts.some((p) => p.name === partName))
          return true;
        if (part.skeletal.back?.detailParts.some((p) => p.name === partName))
          return true;
      }

      return false;
    });
  };

  const getCurrentParts = () => {
    return system === "muscular"
      ? viewMode === "front"
        ? muscularFrontParts
        : muscularBackParts
      : viewMode === "front"
      ? skeletalFrontParts
      : skeletalBackParts;
  };

  const getCurrentImages = () => {
    return system === "muscular"
      ? { front: humanBodyFront, back: humanBodyBack }
      : { front: skeletonFront, back: skeletonBack };
  };

  const getPartsWithDetails = () => {
    const parts = getCurrentParts();
    return parts.filter((part) => part.detailImage);
  };

  const handleDetailedPartSelect = (partName) => {
    setSelectedDropdownPart(partName);
    const parts = getCurrentParts();
    const part = parts.find((p) => p.name === partName);
    if (part) {
      setSelectedParts((prev) => ({
        ...prev,
        [system]: {
          ...prev[system],
          main: [...new Set([...prev[system].main, partName])],
        },
      }));

      setShowDetailView(true);
      setDetailImage(part.detailImage);
      setDetailParts(part.detailParts || []);
    }
    setHighlightedMainPart(partName);
  };

  const toggleMainPart = (partName) => {
    const part = getCurrentParts().find((p) => p.name === partName);

    if (part?.detailImage) {
      setSelectedParts((prev) => {
        const isSelected = prev[system].main.includes(partName);
        const detailPartsToRemove = isSelected
          ? (part.detailParts || []).map((p) => p.name)
          : [];

        return {
          ...prev,
          [system]: {
            main: isSelected
              ? prev[system].main.filter((p) => p !== partName)
              : [...prev[system].main, partName],
            detail: prev[system].detail.filter(
              (p) => !detailPartsToRemove.includes(p)
            ),
          },
        };
      });

      if (!selectedParts[system].main.includes(partName)) {
        setShowDetailView(true);
        setDetailImage(part.detailImage);
        setDetailParts(part.detailParts || []);
      } else {
        const hasOtherDetailParts = selectedParts[system].main.some(
          (p) =>
            p !== partName &&
            getCurrentParts().some((mp) => mp.name === p && mp.detailImage)
        );
        if (!hasOtherDetailParts) {
          setShowDetailView(false);
        }
      }
    } else {
      setSelectedParts((prev) => ({
        ...prev,
        [system]: {
          ...prev[system],
          main: prev[system].main.includes(partName)
            ? prev[system].main.filter((p) => p !== partName)
            : [...prev[system].main, partName],
        },
      }));
      setShowDetailView(false); // Hide detail view when clicking a part without details
    }
    setHighlightedMainPart(partName);
  };

  const toggleDetailPart = (partName) => {
    setSelectedParts((prev) => ({
      ...prev,
      [system]: {
        ...prev[system],
        detail: prev[system].detail.includes(partName)
          ? prev[system].detail.filter((p) => p !== partName)
          : [...prev[system].detail, partName],
      },
    }));
    setHighlightedDetailPart(partName);
  };

  const clearSelection = () => {
    setSelectedParts({
      muscular: { main: [], detail: [] },
      skeletal: { main: [], detail: [] },
    });
    setHighlightedMainPart(null);
    setHighlightedDetailPart(null);
    setShowDetailView(false);
    setDetailImage(null);
    setDetailParts([]);
  };

  const toggleViewMode = () => {
    setViewMode((prev) => (prev === "front" ? "back" : "front"));
    setHighlightedMainPart(null);
    setHighlightedDetailPart(null);

    setSelectedDropdownPart(""); // Clear the dropdown selection
    setShowDetailView(false);
    setDetailImage(null);
  };
  console.log(selectedDropdownPart);
  const handleSystemChange = (newSystem) => {
    setSystem(newSystem);
    setHighlightedMainPart(null);
    setHighlightedDetailPart(null);
    setSelectedDropdownPart("");
    setDetailImage(null);
    setShowDetailView(false);

    // Check if there are any detail parts in the new system to show detail view
    const hasDetailPart = selectedParts[newSystem].main.some((partName) => {
      const parts =
        newSystem === "muscular"
          ? [...muscularFrontParts, ...muscularBackParts]
          : [...skeletalFrontParts, ...skeletalBackParts];
      const part = parts.find((p) => p.name === partName);
      return part?.detailImage;
    });

    if (hasDetailPart) {
      const lastMainPart =
        selectedParts[newSystem].main[selectedParts[newSystem].main.length - 1];
      const parts =
        newSystem === "muscular"
          ? [...muscularFrontParts, ...muscularBackParts]
          : [...skeletalFrontParts, ...skeletalBackParts];
      const part = parts.find((p) => p.name === lastMainPart);
      if (part?.detailImage) {
        setShowDetailView(true);
        setDetailImage(part.detailImage);
        setDetailParts(part.detailParts || []);
      }
    } else {
      setShowDetailView(false);
    }
  };

  const currentParts = getCurrentParts();
  const currentImages = getCurrentImages();
  const currentImage = currentImages[viewMode];

  return (
    <div className="body-map-container" style={{ backgroundColor: "#1a1a1a" }}>
      <div className="row">
        <div className="col-4">
          <div className=" m-3">
            <div
              className="card bg-dark text-white shadow-lg"
              style={{ width: "350px", height: "77vh", overflowY: "scroll" }}
            >
              <div className="card-body">
                <h5 className="card-title mb-3">2D Human Anatomy Map</h5>

                <div className="mb-3">
                  <label className="form-label small">
                    Quick Access to Detailed Parts (
                    {viewMode === "front" ? "Front" : "Back"} View)
                  </label>
                  <select
                    className="form-select bg-dark text-white"
                    onChange={(e) => handleDetailedPartSelect(e.target.value)}
                    value={
                      getPartsWithDetails().some(
                        (p) => p.name === selectedDropdownPart
                      )
                        ? selectedDropdownPart
                        : ""
                    }
                  >
                    <option value="" disabled>
                      Select a detailed part...
                    </option>
                    {getPartsWithDetails().map((part) => (
                      <option key={part.name} value={part.name}>
                        {part.name}
                      </option>
                    ))}
                  </select>
                  <small className="text-muted">Click to add parts</small>
                </div>

                <div className="mb-3">
                  <label className="form-label small">System</label>
                  <select
                    className="form-select bg-dark text-white"
                    value={system}
                    onChange={(e) => handleSystemChange(e.target.value)}
                  >
                    <option value="muscular">Muscular System</option>
                    <option value="skeletal">Skeletal System</option>
                  </select>
                </div>

                <div className="mb-3">
                  <label className="form-label small">Current View</label>
                  <div className="d-flex gap-2">
                    <button
                      className={`btn btn-outline-info flex-grow-1 ${
                        viewMode === "front" ? "active" : ""
                      }`}
                      onClick={() => setViewMode("front")}
                    >
                      Front View
                    </button>
                    <button
                      className={`btn btn-outline-info flex-grow-1 ${
                        viewMode === "back" ? "active" : ""
                      }`}
                      onClick={() => setViewMode("back")}
                    >
                      Back View
                    </button>
                  </div>
                </div>

                <hr className="border-secondary my-2" />

                <div className="mb-3">
                  <div className="d-flex justify-content-between align-items-center mb-2">
                    <label className="form-label small mb-0">
                      Selected Parts (
                      {
                        [
                          ...selectedParts[system].main,
                          ...selectedParts[system].detail,
                        ].length
                      }
                      )
                    </label>
                    {[
                      ...selectedParts[system].main,
                      ...selectedParts[system].detail,
                    ].length > 0 && (
                      <button
                        className="btn btn-outline-danger btn-sm"
                        onClick={clearSelection}
                      >
                        Clear All
                      </button>
                    )}
                  </div>
                  <div
                    className="bg-dark p-2 rounded"
                    style={{ maxHeight: "150px", overflowY: "auto" }}
                  >
                    {[
                      ...selectedParts[system].main,
                      ...selectedParts[system].detail,
                    ].length > 0 ? (
                      [
                        ...selectedParts[system].main,
                        ...selectedParts[system].detail,
                      ].map((part) => (
                        <div
                          key={part}
                          className="badge bg-info text-dark m-1 d-inline-flex align-items-center"
                        >
                          <span>{part}</span>
                        </div>
                      ))
                    ) : (
                      <div className="text-muted small">No parts selected</div>
                    )}
                  </div>
                </div>
                <div className="mb-3">
                  <label className="form-label small">Clinical Notes</label>
                  <textarea
                    className="form-control bg-dark text-white"
                    rows="4"
                    value={manualInput}
                    onChange={handleManualInputChange}
                    placeholder="Add notes about the selected anatomy..."
                  />
                  <div className="mt-2">
                    <p className="small mb-1">
                      Microphone: {listening ? "on" : "off"}
                    </p>
                    <div className="d-flex gap-2">
                      <button
                        className="btn btn-outline-success btn-sm"
                        onClick={SpeechRecognition.startListening}
                      >
                        Start Dictation
                      </button>
                      <button
                        className="btn btn-outline-danger btn-sm"
                        onClick={SpeechRecognition.stopListening}
                      >
                        Stop
                      </button>
                      <button
                        className="btn btn-outline-warning btn-sm"
                        onClick={() => {
                          setManualInput("");
                          setSpeechInput("");
                        }}
                      >
                        Clear
                      </button>
                    </div>
                  </div>
                </div>

                {(highlightedMainPart || highlightedDetailPart) && (
                  <div className="mb-3">
                    <label className="form-label small">Highlighted Part</label>
                    <div className="bg-info bg-opacity-25 p-2 rounded">
                      <div className="fw-bold mb-1">
                        {highlightedMainPart || highlightedDetailPart}
                      </div>
                      <div className="d-flex gap-1">
                        <button
                          className="btn btn-outline-light btn-sm flex-fill"
                          onClick={() => {
                            setHighlightedMainPart(null);
                            setHighlightedDetailPart(null);
                          }}
                        >
                          Deselect
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                <hr className="border-secondary my-2" />

                <p className="text-muted small mb-0">
                  • Click on body parts to select/deselect
                  <br />
                  • Toggle between front and back views
                  <br />• Selected parts will be highlighted
                </p>
              </div>
            </div>
          </div>
        </div>
        <div className="col-5">
          <div className="d-flex justify-content-center align-items-center">
            <div className="position-relative">
              <img
                src={currentImage}
                useMap="#bodymap"
                alt={`Human Body ${viewMode} View`}
                className="body-image"
              />

              <svg
                className="overlay-svg"
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  pointerEvents: "none",
                }}
              >
                {currentParts
                  .filter((p) => selectedParts[system].main.includes(p.name))
                  .map((p) => (
                    <polygon
                      key={p.name}
                      points={p.coords}
                      fill="rgba(0, 123, 255, 0.4)"
                      stroke="#007bff"
                      strokeWidth="1"
                    />
                  ))}
                {highlightedMainPart &&
                  !selectedParts[system].main.includes(highlightedMainPart) && (
                    <polygon
                      points={
                        currentParts.find((p) => p.name === highlightedMainPart)
                          ?.coords || ""
                      }
                      fill="rgba(255, 193, 7, 0.4)"
                      stroke="#ffc107"
                      strokeWidth="1"
                    />
                  )}
              </svg>

              <map name="bodymap">
                {currentParts.map((p) => (
                  <area
                    key={p.name}
                    shape="poly"
                    coords={p.coords}
                    alt={p.name}
                    onClick={() => toggleMainPart(p.name)}
                    onMouseEnter={() => setHighlightedMainPart(p.name)}
                    onMouseLeave={() => setHighlightedMainPart(null)}
                  />
                ))}
              </map>
            </div>
          </div>
          <div className="">
            <div className="d-flex justify-content-between gap-2">
              <button
                className="btn btn-success flex-grow-1"
                onClick={handleSubmit}
              >
                Save Selection
              </button>
              {savedParts.length > 0 && (
                <button className="btn btn-danger" onClick={clearSavedParts}>
                  Clear Saved
                </button>
              )}
            </div>
          </div>
        </div>

        <div className="col-3 pt-4 px-0">
          {showDetailView && (
            <div className="position-relative ">
              <img
                src={detailImage}
                useMap="#detailmap"
                alt="Detailed View"
                className="detail-image"
              />

              <svg
                className="overlay-svg"
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  pointerEvents: "none",
                }}
              >
                {detailParts
                  .filter((p) => selectedParts[system].detail.includes(p.name))
                  .map((p) => (
                    <polygon
                      key={p.name}
                      points={p.coords}
                      fill="rgba(0, 123, 255, 0.4)"
                      stroke="#007bff"
                      strokeWidth="1"
                    />
                  ))}
                {highlightedDetailPart &&
                  !selectedParts[system].detail.includes(
                    highlightedDetailPart
                  ) && (
                    <polygon
                      points={
                        detailParts.find(
                          (p) => p.name === highlightedDetailPart
                        )?.coords || ""
                      }
                      fill="rgba(255, 193, 7, 0.4)"
                      stroke="#ffc107"
                      strokeWidth="1"
                    />
                  )}
              </svg>

              <map name="detailmap">
                {detailParts.map((p) => (
                  <area
                    key={p.name}
                    shape="poly"
                    coords={p.coords}
                    alt={p.name}
                    onClick={() => toggleDetailPart(p.name)}
                    onMouseEnter={() => setHighlightedDetailPart(p.name)}
                    onMouseLeave={() => setHighlightedDetailPart(null)}
                  />
                ))}
              </map>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FullAnatomicalMap;
