{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Shop Management System\n\n## Overview\n\nThis is a full-stack shop management application built to handle multiple types of shops (dairy, meat, grocery) with role-based access control. The system provides comprehensive dashboards for administrators and shopkeepers to manage their respective operations including inventory, orders, and sales tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Framework**: Custom component library built on Radix UI primitives with Tailwind CSS\n- **Styling**: Tailwind CSS with shadcn/ui component system using CSS variables for theming\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based authentication with role-based access control\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Build System\n- **Frontend Bundler**: Vite with React plugin\n- **Backend Bundler**: esbuild for production builds\n- **Development**: tsx for TypeScript execution in development\n- **Deployment**: Production build creates optimized static assets and bundled server\n\n## Key Components\n\n### Authentication System\n- JWT token-based authentication\n- Role-based access control (Admin vs Shopkeeper)\n- Protected routes with automatic redirection\n- Token validation middleware on API endpoints\n\n### Database Schema\n- **Users**: Stores admin and shopkeeper accounts with role information\n- **Shops**: Manages different shop types (dairy, meat, grocery) with owner relationships\n- **Categories**: Product categories specific to shop types\n- **Products**: Inventory items with stock tracking and shop associations\n- **Orders**: Order management with line items and status tracking\n\n### API Structure\n- RESTful API design with Express.js routes\n- Centralized error handling middleware\n- Request/response logging for API endpoints\n- Authentication middleware for protected routes\n- Role-based authorization middleware\n\n### Role-Based Dashboards\n- **Admin Dashboard**: Overview of all shops, products, orders, and system-wide analytics\n- **Shopkeeper Dashboard**: Shop-specific metrics, inventory management, and order tracking\n- **Responsive Design**: Mobile-friendly interface with adaptive layouts\n\n## Data Flow\n\n1. **Authentication Flow**:\n   - User logs in with credentials\n   - Server validates and returns JWT token\n   - Client stores token and includes in API requests\n   - Server validates token on protected routes\n\n2. **Data Management Flow**:\n   - React Query manages server state and caching\n   - API requests go through centralized request handler\n   - Database operations use Drizzle ORM with type safety\n   - Real-time updates through query invalidation\n\n3. **Role-Based Access**:\n   - Route protection at component level\n   - API endpoint protection with middleware\n   - Dynamic UI rendering based on user role\n   - Automatic redirection for unauthorized access\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components**: Radix UI primitives for accessible components\n- **Icons**: Lucide React for modern icons\n- **Date Handling**: date-fns for date manipulation\n- **Form Validation**: Zod for schema validation\n- **HTTP Client**: Fetch API with custom wrapper\n\n### Backend Dependencies\n- **Database**: Neon PostgreSQL serverless database\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: jsonwebtoken for JWT handling\n- **Session Store**: connect-pg-simple for PostgreSQL session storage\n\n### Development Tools\n- **Type Safety**: TypeScript across the entire stack\n- **Code Quality**: ESLint and Prettier (implied by setup)\n- **Development Server**: Vite dev server with HMR\n- **Build Tools**: Vite for frontend, esbuild for backend\n\n## Deployment Strategy\n\n### Development Environment\n- Vite development server for frontend with hot module replacement\n- tsx for running TypeScript backend in development\n- Environment variables for database configuration\n- Replit integration with development banner and cartographer\n\n### Production Build\n- Frontend: Vite builds optimized static assets to `dist/public`\n- Backend: esbuild bundles server code to `dist/index.js`\n- Single deployment artifact with static file serving\n- Environment-based configuration for database connections\n\n### Database Management\n- Drizzle Kit for schema migrations\n- PostgreSQL database with connection pooling\n- Schema definitions in shared directory for type consistency\n- Database URL configuration through environment variables\n\nThe application follows a modern full-stack architecture with strong type safety, role-based security, and scalable data management patterns. The modular design allows for easy extension of shop types and user roles while maintaining code consistency and developer experience.","size_bytes":5107},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./client/index.html\"\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [import(\"tailwindcss-animate\")],\n}","size_bytes":2090},"vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":970},"server/index.js":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1958},"server/routes.js":{"content":"import { createServer } from \"http\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage.js\";\nimport { loginSchema, insertUserSchema, insertShopSchema, insertProductSchema, insertOrderSchema } from \"../shared/schema.js\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"shop-management-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\n// Middleware to check admin role\nconst requireAdmin = (req, res, next) => {\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\n// Middleware to check shopkeeper role or ownership\nconst requireShopkeeperOrOwner = async (req, res, next) => {\n  if (req.user.role === 'admin') {\n    return next(); // Admin can access everything\n  }\n  \n  if (req.user.role === 'shopkeeper') {\n    // Check if shopkeeper owns the shop being accessed\n    const shopId = req.params.shopId || req.body.shopId;\n    if (shopId) {\n      const shop = await storage.getShop(parseInt(shopId));\n      if (!shop || shop.ownerId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n    }\n    return next();\n  }\n  \n  return res.status(403).json({ message: 'Access denied' });\n};\n\nexport async function registerRoutes(app) {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    res.json({\n      id: req.user.id,\n      email: req.user.email,\n      name: req.user.name,\n      role: req.user.role,\n    });\n  });\n\n  // User management routes (Admin only)\n  app.get(\"/api/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const sanitizedUsers = users.map(({ password, ...user }) => user);\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      const { password, ...sanitizedUser } = user;\n      res.status(201).json(sanitizedUser);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  // Shop management routes\n  app.get(\"/api/shops\", authenticateToken, async (req, res) => {\n    try {\n      let shops;\n      if (req.user.role === 'admin') {\n        shops = await storage.getAllShops();\n      } else {\n        shops = await storage.getShopsByOwner(req.user.id);\n      }\n      res.json(shops);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch shops\" });\n    }\n  });\n\n  app.post(\"/api/shops\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const shopData = insertShopSchema.parse(req.body);\n      const shop = await storage.createShop(shopData);\n      res.status(201).json(shop);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid shop data\" });\n    }\n  });\n\n  app.put(\"/api/shops/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const shopData = insertShopSchema.partial().parse(req.body);\n      const shop = await storage.updateShop(id, shopData);\n      if (!shop) {\n        return res.status(404).json({ message: \"Shop not found\" });\n      }\n      res.json(shop);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid shop data\" });\n    }\n  });\n\n  app.delete(\"/api/shops/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteShop(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Shop not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete shop\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", authenticateToken, async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Product management routes\n  app.get(\"/api/products\", authenticateToken, async (req, res) => {\n    try {\n      let products;\n      if (req.user.role === 'admin') {\n        products = await storage.getAllProducts();\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        const shopIds = shops.map(shop => shop.id);\n        products = [];\n        for (const shopId of shopIds) {\n          const shopProducts = await storage.getProductsByShop(shopId);\n          products.push(...shopProducts);\n        }\n      }\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/shop/:shopId\", authenticateToken, requireShopkeeperOrOwner, async (req, res) => {\n    try {\n      const shopId = parseInt(req.params.shopId);\n      const products = await storage.getProductsByShop(shopId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", authenticateToken, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      \n      // Check if shopkeeper owns the shop\n      if (req.user.role === 'shopkeeper') {\n        const shop = await storage.getShop(productData.shopId);\n        if (!shop || shop.ownerId !== req.user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const productData = insertProductSchema.partial().parse(req.body);\n      \n      // Check ownership for shopkeepers\n      if (req.user.role === 'shopkeeper') {\n        const existingProduct = await storage.getProduct(id);\n        if (!existingProduct) {\n          return res.status(404).json({ message: \"Product not found\" });\n        }\n        const shop = await storage.getShop(existingProduct.shopId);\n        if (!shop || shop.ownerId !== req.user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      const product = await storage.updateProduct(id, productData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      // Check ownership for shopkeepers\n      if (req.user.role === 'shopkeeper') {\n        const existingProduct = await storage.getProduct(id);\n        if (!existingProduct) {\n          return res.status(404).json({ message: \"Product not found\" });\n        }\n        const shop = await storage.getShop(existingProduct.shopId);\n        if (!shop || shop.ownerId !== req.user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      const deleted = await storage.deleteProduct(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Stock management routes\n  app.get(\"/api/stock/low\", authenticateToken, async (req, res) => {\n    try {\n      const shopId = req.query.shopId;\n      let products;\n      \n      if (req.user.role === 'admin') {\n        if (shopId) {\n          // Admin viewing specific shop\n          const targetShopId = parseInt(shopId);\n          products = await storage.getLowStockProducts(targetShopId);\n        } else {\n          // Admin viewing all shops\n          products = await storage.getLowStockProducts();\n        }\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        products = [];\n        for (const shop of shops) {\n          const shopProducts = await storage.getLowStockProducts(shop.id);\n          products.push(...shopProducts);\n        }\n      }\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch low stock products\" });\n    }\n  });\n\n  app.get(\"/api/stock/out\", authenticateToken, async (req, res) => {\n    try {\n      const shopId = req.query.shopId;\n      let products;\n      \n      if (req.user.role === 'admin') {\n        if (shopId) {\n          // Admin viewing specific shop\n          const targetShopId = parseInt(shopId);\n          products = await storage.getOutOfStockProducts(targetShopId);\n        } else {\n          // Admin viewing all shops\n          products = await storage.getOutOfStockProducts();\n        }\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        products = [];\n        for (const shop of shops) {\n          const shopProducts = await storage.getOutOfStockProducts(shop.id);\n          products.push(...shopProducts);\n        }\n      }\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch out of stock products\" });\n    }\n  });\n\n  // Order management routes\n  app.get(\"/api/orders\", authenticateToken, async (req, res) => {\n    try {\n      let orders;\n      if (req.user.role === 'admin') {\n        orders = await storage.getAllOrders();\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        orders = [];\n        for (const shop of shops) {\n          const shopOrders = await storage.getOrdersByShop(shop.id);\n          orders.push(...shopOrders);\n        }\n      }\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/shop/:shopId\", authenticateToken, requireShopkeeperOrOwner, async (req, res) => {\n    try {\n      const shopId = parseInt(req.params.shopId);\n      const orders = await storage.getOrdersByShop(shopId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", authenticateToken, async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      \n      // Check if shopkeeper owns the shop\n      if (req.user.role === 'shopkeeper') {\n        const shop = await storage.getShop(orderData.shopId);\n        if (!shop || shop.ownerId !== req.user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      const order = await storage.createOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const orderData = insertOrderSchema.partial().parse(req.body);\n      \n      // Check ownership for shopkeepers\n      if (req.user.role === 'shopkeeper') {\n        const existingOrder = await storage.getOrder(id);\n        if (!existingOrder) {\n          return res.status(404).json({ message: \"Order not found\" });\n        }\n        const shop = await storage.getShop(existingOrder.shopId);\n        if (!shop || shop.ownerId !== req.user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      const order = await storage.updateOrder(id, orderData);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  // Dashboard statistics\n  app.get(\"/api/dashboard/stats\", authenticateToken, async (req, res) => {\n    try {\n      const shopId = req.query.shopId;\n      \n      if (req.user.role === 'admin') {\n        if (shopId && shopId !== 'all') {\n          // Admin viewing specific shop\n          const targetShopId = parseInt(shopId);\n          const shop = await storage.getShop(targetShopId);\n          if (!shop) {\n            return res.status(404).json({ message: \"Shop not found\" });\n          }\n          \n          const products = await storage.getProductsByShop(targetShopId);\n          const orders = await storage.getOrdersByShop(targetShopId);\n          const lowStockProducts = await storage.getLowStockProducts(targetShopId);\n          \n          const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0);\n          \n          res.json({\n            totalShops: 1,\n            totalProducts: products.length,\n            totalOrders: orders.length,\n            totalRevenue: totalRevenue.toFixed(2),\n            lowStockCount: lowStockProducts.length,\n            shopName: shop.name,\n            shopType: shop.type,\n          });\n        } else {\n          // Admin viewing all shops\n          const shops = await storage.getAllShops();\n          const products = await storage.getAllProducts();\n          const orders = await storage.getAllOrders();\n          const lowStockProducts = await storage.getLowStockProducts();\n          \n          const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0);\n          \n          res.json({\n            totalShops: shops.length,\n            totalProducts: products.length,\n            totalOrders: orders.length,\n            totalRevenue: totalRevenue.toFixed(2),\n            lowStockCount: lowStockProducts.length,\n          });\n        }\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        let products = [];\n        let orders = [];\n        let lowStockProducts = [];\n        \n        for (const shop of shops) {\n          const shopProducts = await storage.getProductsByShop(shop.id);\n          const shopOrders = await storage.getOrdersByShop(shop.id);\n          const shopLowStock = await storage.getLowStockProducts(shop.id);\n          \n          products.push(...shopProducts);\n          orders.push(...shopOrders);\n          lowStockProducts.push(...shopLowStock);\n        }\n        \n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const todayOrders = orders.filter(order => \n          new Date(order.createdAt).getTime() >= today.getTime()\n        );\n        const dailyProfit = todayOrders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0);\n        \n        res.json({\n          dailyProfit: dailyProfit.toFixed(2),\n          ordersToday: todayOrders.length,\n          totalProducts: products.length,\n          lowStockItems: lowStockProducts.length,\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Customer endpoints\n  app.get(\"/api/customers\", authenticateToken, async (req, res) => {\n    try {\n      let customers;\n      if (req.user.role === 'admin') {\n        customers = await storage.getAllCustomers();\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        customers = [];\n        for (const shop of shops) {\n          const shopCustomers = await storage.getCustomersByShop(shop.id);\n          customers.push(...shopCustomers);\n        }\n      }\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.get(\"/api/customers/search\", authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      let customers;\n      \n      if (req.user.role === 'admin') {\n        const allCustomers = await storage.getAllCustomers();\n        if (!q) {\n          customers = allCustomers;\n        } else {\n          const lowerQuery = q.toLowerCase();\n          customers = allCustomers.filter(customer => \n            customer.name.toLowerCase().includes(lowerQuery) ||\n            customer.phone.includes(q) ||\n            (customer.email && customer.email.toLowerCase().includes(lowerQuery))\n          );\n        }\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        customers = [];\n        for (const shop of shops) {\n          const shopCustomers = await storage.searchCustomers(q, shop.id);\n          customers.push(...shopCustomers);\n        }\n      }\n      \n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search customers\" });\n    }\n  });\n\n  app.get(\"/api/customers/purchases\", authenticateToken, async (req, res) => {\n    try {\n      let customers;\n      if (req.user.role === 'admin') {\n        customers = await storage.getAllCustomers();\n      } else {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        customers = [];\n        for (const shop of shops) {\n          const shopCustomers = await storage.getCustomersByShop(shop.id);\n          customers.push(...shopCustomers);\n        }\n      }\n\n      const customerPurchases = {};\n      for (const customer of customers) {\n        const bills = await storage.getBillsByCustomer(customer.id);\n        const total = bills.reduce((sum, bill) => sum + parseFloat(bill.total || 0), 0);\n        const lastBill = bills.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0];\n        \n        customerPurchases[customer.id] = {\n          bills: bills.length,\n          total: total,\n          lastPurchase: lastBill ? lastBill.createdAt : null\n        };\n      }\n\n      res.json(customerPurchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer purchases\" });\n    }\n  });\n\n  app.post(\"/api/customers\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        if (shops.length > 0) {\n          req.body.shopId = shops[0].id;\n        }\n      }\n\n      const customer = await storage.createCustomer(req.body);\n      res.status(201).json(customer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.get(\"/api/customers/:id\", authenticateToken, async (req, res) => {\n    try {\n      const customerId = parseInt(req.params.id);\n      const customer = await storage.getCustomer(customerId);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      if (req.user.role !== 'admin') {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        const hasAccess = shops.some(shop => shop.id === customer.shopId);\n        if (!hasAccess) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      res.json(customer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  // Bill endpoints\n  app.post(\"/api/bills\", authenticateToken, async (req, res) => {\n    try {\n      const { customer, items, subtotal, tax, total } = req.body;\n      \n      let shopId = req.body.shopId;\n      if (req.user.role !== 'admin') {\n        const shops = await storage.getShopsByOwner(req.user.id);\n        if (shops.length > 0) {\n          shopId = shops[0].id;\n        }\n      }\n\n      let customerId = customer.id;\n      if (!customerId && customer.name && customer.phone) {\n        const existingCustomers = await storage.searchCustomers(customer.phone, shopId);\n        if (existingCustomers.length > 0) {\n          customerId = existingCustomers[0].id;\n        } else {\n          const newCustomer = await storage.createCustomer({\n            name: customer.name,\n            phone: customer.phone,\n            email: customer.email || '',\n            address: customer.address || '',\n            shopId: shopId\n          });\n          customerId = newCustomer.id;\n        }\n      }\n\n      const billNumber = `BILL-${Date.now()}`;\n      const bill = await storage.createBill({\n        billNumber,\n        customerId,\n        shopId,\n        subtotal: subtotal.toString(),\n        tax: tax.toString(),\n        total: total.toString()\n      });\n\n      for (const item of items) {\n        await storage.createBillItem({\n          billId: bill.id,\n          productId: parseInt(item.productId),\n          productName: item.productName,\n          quantity: item.quantity,\n          price: item.price.toString(),\n          total: item.total.toString()\n        });\n      }\n\n      res.status(201).json({ ...bill, items });\n    } catch (error) {\n      console.error(\"Error creating bill:\", error);\n      res.status(500).json({ message: \"Failed to create bill\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":22469},"server/storage.js":{"content":"import { \n  users, shops, categories, products, orders, orderItems, customers, bills, billItems\n} from \"../shared/schema.js\";\n\nexport class MemStorage {\n  constructor() {\n    this.users = new Map();\n    this.shops = new Map();\n    this.categories = new Map();\n    this.products = new Map();\n    this.orders = new Map();\n    this.orderItems = new Map();\n    this.customers = new Map();\n    this.bills = new Map();\n    this.billItems = new Map();\n    this.currentIds = {\n      users: 0,\n      shops: 0,\n      categories: 0,\n      products: 0,\n      orders: 0,\n      orderItems: 0,\n      customers: 0,\n      bills: 0,\n      billItems: 0,\n    };\n\n    // Initialize with demo data\n    this.initializeDemoData();\n  }\n\n  initializeDemoData() {\n    // Create admin user\n    const admin = {\n      id: this.currentIds.users++,\n      username: \"admin\",\n      email: \"admin@shopmanager.com\",\n      password: \"admin123\", // In real app, this would be hashed\n      role: \"admin\",\n      name: \"Admin User\",\n      phone: \"+1-234-567-8900\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.users.set(admin.id, admin);\n\n    // Create shopkeeper users\n    const shopkeeper1 = {\n      id: this.currentIds.users++,\n      username: \"shopkeeper1\",\n      email: \"shop@dairy.com\",\n      password: \"shop123\",\n      role: \"shopkeeper\",\n      name: \"John Smith\",\n      phone: \"+1-234-567-8901\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.users.set(shopkeeper1.id, shopkeeper1);\n\n    // Create shops\n    const dairyShop = {\n      id: this.currentIds.shops++,\n      name: \"Fresh Dairy Shop\",\n      type: \"dairy\",\n      ownerId: shopkeeper1.id,\n      address: \"123 Main St, City\",\n      phone: \"+1-234-567-8901\",\n      email: \"shop@dairy.com\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.shops.set(dairyShop.id, dairyShop);\n\n    // Create categories\n    const dairyCategory = {\n      id: this.currentIds.categories++,\n      name: \"Dairy Products\",\n      shopType: \"dairy\",\n      description: \"Fresh dairy products\",\n      isActive: true,\n    };\n    this.categories.set(dairyCategory.id, dairyCategory);\n\n    // Create sample products\n    const milk = {\n      id: this.currentIds.products++,\n      name: \"Fresh Milk 1L\",\n      sku: \"MILK001\",\n      description: \"Fresh organic milk\",\n      price: \"4.99\",\n      stock: 25,\n      minStock: 10,\n      unit: \"liters\",\n      brand: \"FreshFarm\",\n      imageUrl: null,\n      categoryId: dairyCategory.id,\n      shopId: dairyShop.id,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.products.set(milk.id, milk);\n\n    // Create sample orders\n    const order1 = {\n      id: this.currentIds.orders++,\n      orderNumber: \"ORD-001\",\n      customerId: null,\n      shopId: dairyShop.id,\n      status: \"completed\",\n      totalAmount: \"24.95\",\n      itemCount: 5,\n      customerName: \"Alice Johnson\",\n      customerPhone: \"+1-234-567-8902\",\n      notes: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.set(order1.id, order1);\n\n    // Create demo customers\n    const customer1 = {\n      id: this.currentIds.customers++,\n      name: \"Alice Johnson\",\n      phone: \"+1-234-567-8910\",\n      email: \"alice.johnson@email.com\",\n      address: \"456 Oak Street, City\",\n      shopId: dairyShop.id,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.customers.set(customer1.id, customer1);\n\n    const customer2 = {\n      id: this.currentIds.customers++,\n      name: \"Bob Smith\",\n      phone: \"+1-234-567-8911\",\n      email: \"bob.smith@email.com\",\n      address: \"789 Pine Avenue, City\",\n      shopId: dairyShop.id,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.customers.set(customer2.id, customer2);\n\n    const customer3 = {\n      id: this.currentIds.customers++,\n      name: \"Carol Davis\",\n      phone: \"+1-234-567-8912\",\n      email: \"carol.davis@email.com\",\n      address: \"321 Elm Street, City\",\n      shopId: dairyShop.id,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.customers.set(customer3.id, customer3);\n  }\n\n  // User operations\n  async getUser(id) {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email) {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser) {\n    const user = {\n      ...insertUser,\n      id: this.currentIds.users++,\n      phone: insertUser.phone || null,\n      isActive: insertUser.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id, userData) {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...userData };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers() {\n    return Array.from(this.users.values());\n  }\n\n  // Shop operations\n  async getShop(id) {\n    return this.shops.get(id);\n  }\n\n  async createShop(insertShop) {\n    const shop = {\n      ...insertShop,\n      id: this.currentIds.shops++,\n      isActive: insertShop.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.shops.set(shop.id, shop);\n    return shop;\n  }\n\n  async updateShop(id, shopData) {\n    const shop = this.shops.get(id);\n    if (!shop) return undefined;\n    \n    const updatedShop = { ...shop, ...shopData };\n    this.shops.set(id, updatedShop);\n    return updatedShop;\n  }\n\n  async deleteShop(id) {\n    return this.shops.delete(id);\n  }\n\n  async getAllShops() {\n    return Array.from(this.shops.values());\n  }\n\n  async getShopsByOwner(ownerId) {\n    return Array.from(this.shops.values()).filter(shop => shop.ownerId === ownerId);\n  }\n\n  // Category operations\n  async getCategory(id) {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory) {\n    const category = {\n      ...insertCategory,\n      id: this.currentIds.categories++,\n      isActive: insertCategory.isActive ?? true,\n    };\n    this.categories.set(category.id, category);\n    return category;\n  }\n\n  async updateCategory(id, categoryData) {\n    const category = this.categories.get(id);\n    if (!category) return undefined;\n    \n    const updatedCategory = { ...category, ...categoryData };\n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteCategory(id) {\n    return this.categories.delete(id);\n  }\n\n  async getAllCategories() {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategoriesByShopType(shopType) {\n    return Array.from(this.categories.values()).filter(category => category.shopType === shopType);\n  }\n\n  // Product operations\n  async getProduct(id) {\n    return this.products.get(id);\n  }\n\n  async createProduct(insertProduct) {\n    const product = {\n      ...insertProduct,\n      id: this.currentIds.products++,\n      isActive: insertProduct.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.products.set(product.id, product);\n    return product;\n  }\n\n  async updateProduct(id, productData) {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    const updatedProduct = { ...product, ...productData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id) {\n    return this.products.delete(id);\n  }\n\n  async getAllProducts() {\n    return Array.from(this.products.values());\n  }\n\n  async getProductsByShop(shopId) {\n    return Array.from(this.products.values()).filter(product => product.shopId === shopId);\n  }\n\n  async getLowStockProducts(shopId) {\n    let products = Array.from(this.products.values());\n    if (shopId) {\n      products = products.filter(product => product.shopId === shopId);\n    }\n    return products.filter(product => product.stock <= product.minStock && product.stock > 0);\n  }\n\n  async getOutOfStockProducts(shopId) {\n    let products = Array.from(this.products.values());\n    if (shopId) {\n      products = products.filter(product => product.shopId === shopId);\n    }\n    return products.filter(product => product.stock === 0);\n  }\n\n  // Order operations\n  async getOrder(id) {\n    return this.orders.get(id);\n  }\n\n  async createOrder(insertOrder) {\n    const order = {\n      ...insertOrder,\n      id: this.currentIds.orders++,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.set(order.id, order);\n    return order;\n  }\n\n  async updateOrder(id, orderData) {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updatedOrder = { ...order, ...orderData, updatedAt: new Date() };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async deleteOrder(id) {\n    return this.orders.delete(id);\n  }\n\n  async getAllOrders() {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrdersByShop(shopId) {\n    return Array.from(this.orders.values()).filter(order => order.shopId === shopId);\n  }\n\n  async getOrdersByStatus(status, shopId) {\n    let orders = Array.from(this.orders.values()).filter(order => order.status === status);\n    if (shopId) {\n      orders = orders.filter(order => order.shopId === shopId);\n    }\n    return orders;\n  }\n\n  // Order item operations\n  async createOrderItem(insertOrderItem) {\n    const orderItem = {\n      ...insertOrderItem,\n      id: this.currentIds.orderItems++,\n    };\n    this.orderItems.set(orderItem.id, orderItem);\n    return orderItem;\n  }\n\n  async getOrderItems(orderId) {\n    return Array.from(this.orderItems.values()).filter(item => item.orderId === orderId);\n  }\n\n  // Customer operations\n  async createCustomer(insertCustomer) {\n    const customer = {\n      ...insertCustomer,\n      id: this.currentIds.customers++,\n      createdAt: new Date(),\n    };\n    this.customers.set(customer.id, customer);\n    return customer;\n  }\n\n  async getCustomer(id) {\n    return this.customers.get(id);\n  }\n\n  async getAllCustomers() {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomersByShop(shopId) {\n    return Array.from(this.customers.values()).filter(customer => customer.shopId === shopId);\n  }\n\n  async searchCustomers(query, shopId) {\n    const customers = await this.getCustomersByShop(shopId);\n    if (!query) return customers;\n    \n    const lowerQuery = query.toLowerCase();\n    return customers.filter(customer => \n      customer.name.toLowerCase().includes(lowerQuery) ||\n      customer.phone.includes(query) ||\n      (customer.email && customer.email.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  async updateCustomer(id, updates) {\n    const customer = this.customers.get(id);\n    if (!customer) return undefined;\n    \n    const updatedCustomer = { ...customer, ...updates };\n    this.customers.set(id, updatedCustomer);\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id) {\n    return this.customers.delete(id);\n  }\n\n  // Bill operations\n  async createBill(insertBill) {\n    const bill = {\n      ...insertBill,\n      id: this.currentIds.bills++,\n      createdAt: new Date(),\n    };\n    this.bills.set(bill.id, bill);\n    return bill;\n  }\n\n  async getBill(id) {\n    return this.bills.get(id);\n  }\n\n  async getAllBills() {\n    return Array.from(this.bills.values());\n  }\n\n  async getBillsByShop(shopId) {\n    return Array.from(this.bills.values()).filter(bill => bill.shopId === shopId);\n  }\n\n  async getBillsByCustomer(customerId) {\n    return Array.from(this.bills.values()).filter(bill => bill.customerId === customerId);\n  }\n\n  // Bill item operations\n  async createBillItem(insertBillItem) {\n    const billItem = {\n      ...insertBillItem,\n      id: this.currentIds.billItems++,\n    };\n    this.billItems.set(billItem.id, billItem);\n    return billItem;\n  }\n\n  async getBillItemsByBill(billId) {\n    return Array.from(this.billItems.values()).filter(item => item.billId === billId);\n  }\n\n  async getCustomerPurchaseHistory(customerId) {\n    const customerBills = await this.getBillsByCustomer(customerId);\n    const billsWithItems = await Promise.all(\n      customerBills.map(async (bill) => ({\n        ...bill,\n        items: await this.getBillItemsByBill(bill.id),\n      }))\n    );\n    return billsWithItems;\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":12160},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport viteConfig from \"../vite.config.js\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2159},"shared/schema.js":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Remove TypeScript-specific type exports and keep only runtime schemas\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'admin' or 'shopkeeper'\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const shops = pgTable(\"shops\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'dairy', 'meat', 'grocery'\n  ownerId: integer(\"owner_id\").references(() => users.id),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  shopType: text(\"shop_type\").notNull(), // 'dairy', 'meat', 'grocery'\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  sku: text(\"sku\").notNull().unique(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  minStock: integer(\"min_stock\").notNull().default(5),\n  unit: text(\"unit\").notNull(), // 'pieces', 'kg', 'liters', etc.\n  brand: text(\"brand\"),\n  imageUrl: text(\"image_url\"),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  shopId: integer(\"shop_id\").references(() => shops.id),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => users.id),\n  shopId: integer(\"shop_id\").references(() => shops.id),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'processing', 'completed', 'cancelled'\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  itemCount: integer(\"item_count\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const customers = pgTable(\"customers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  shopId: integer(\"shop_id\").references(() => shops.id),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const bills = pgTable(\"bills\", {\n  id: serial(\"id\").primaryKey(),\n  billNumber: text(\"bill_number\").notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  shopId: integer(\"shop_id\").references(() => shops.id),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const billItems = pgTable(\"bill_items\", {\n  id: serial(\"id\").primaryKey(),\n  billId: integer(\"bill_id\").references(() => bills.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  productName: text(\"product_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertShopSchema = createInsertSchema(shops).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillSchema = createInsertSchema(bills).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillItemSchema = createInsertSchema(billItems).omit({\n  id: true,\n});\n\n// Type definitions - Keep for runtime schemas only (remove TypeScript types)\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\n// LoginCredentials type removed - use runtime validation only","size_bytes":5790},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext.jsx\";\nimport ProtectedRoute from \"@/components/ProtectedRoute.jsx\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login.jsx\";\n\n// Admin pages\nimport AdminDashboard from \"@/pages/admin/AdminDashboard.jsx\";\nimport ManageShops from \"@/pages/admin/ManageShops.jsx\";\nimport StockManagement from \"@/pages/admin/StockManagement.jsx\";\nimport Orders from \"@/pages/admin/Orders.jsx\";\nimport UserManagement from \"@/pages/admin/UserManagement.jsx\";\nimport Reports from \"@/pages/admin/Reports.jsx\";\n\n// Shopkeeper pages\nimport ShopkeeperDashboard from \"@/pages/shopkeeper/ShopkeeperDashboard.jsx\";\nimport Products from \"@/pages/shopkeeper/Products.jsx\";\nimport AddProduct from \"@/pages/shopkeeper/AddProduct.jsx\";\nimport ShopkeeperOrders from \"@/pages/shopkeeper/Orders.jsx\";\nimport StockAlerts from \"@/pages/shopkeeper/StockAlerts.jsx\";\nimport ShopkeeperReports from \"@/pages/shopkeeper/Reports.jsx\";\nimport Billing from \"@/pages/shopkeeper/Billing.jsx\";\nimport Customers from \"@/pages/shopkeeper/Customers.jsx\";\nimport AddCustomer from \"@/pages/shopkeeper/AddCustomer.jsx\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      \n      {/* Admin routes */}\n      <Route path=\"/admin/dashboard\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin/shops\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <ManageShops />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin/stock\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <StockManagement />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin/orders\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <Orders />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin/users\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <UserManagement />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin/reports\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <Reports />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Shopkeeper routes */}\n      <Route path=\"/shopkeeper/dashboard\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <ShopkeeperDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/products\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <Products />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/add-product\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <AddProduct />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/orders\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <ShopkeeperOrders />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/stock\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <StockAlerts />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/billing\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <Billing />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/customers\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <Customers />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/add-customer\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <AddCustomer />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/shopkeeper/reports\">\n        <ProtectedRoute requiredRole=\"shopkeeper\">\n          <ShopkeeperReports />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Default route - redirect based on role */}\n      <Route path=\"/\">\n        <Login />\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4518},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Bootstrap Integration */\n.main-content {\n  flex: 1;\n  padding: 2rem;\n  margin-left: 250px;\n  min-height: 100vh;\n  background-color: var(--bs-light, #f8f9fa);\n}\n\n.sidebar {\n  width: 250px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100vh;\n  background-color: var(--bs-dark, #212529);\n  color: white;\n  overflow-y: auto;\n  z-index: 1000;\n}\n\n/* Stock status styling */\n.stock-low {\n  border-left: 4px solid #ffc107 !important;\n  background-color: #fff3cd;\n}\n\n.stock-out {\n  border-left: 4px solid #dc3545 !important;  \n  background-color: #f8d7da;\n}\n\n.stock-low tbody tr:hover,\n.stock-out tbody tr:hover {\n  background-color: rgba(0,0,0,0.05);\n}\n\n/* Button styling */\n.btn-action {\n  border: 1px solid #dee2e6;\n  color: #6c757d;\n}\n\n.btn-action:hover {\n  border-color: #007bff;\n  color: #007bff;\n}\n\n/* Dashboard cards */\n.dashboard-card {\n  transition: all 0.3s ease;\n  border: 1px solid #dee2e6;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n/* Sidebar navigation */\n.nav-link {\n  color: rgba(255,255,255,0.8) !important;\n  padding: 0.75rem 1rem;\n  border-radius: 0.375rem;\n  margin: 0.25rem 0;\n}\n\n.nav-link:hover,\n.nav-link.active {\n  background-color: rgba(255,255,255,0.1);\n  color: white !important;\n}\n\n/* Form styling */\n.form-control:focus {\n  border-color: #007bff;\n  box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-gray-200;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: hsl(60, 4.8%, 95.9%);\n  }\n}\n\n/* Bootstrap integration styles */\n.sidebar {\n  min-height: 100vh;\n  background: linear-gradient(135deg, hsl(260, 86%, 72%) 0%, hsl(264, 46%, 48%) 100%);\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 250px;\n  z-index: 1000;\n  transition: all 0.3s;\n}\n\n.sidebar .nav-link {\n  color: hsla(0, 0%, 100%, 0.8);\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin: 4px 16px;\n  transition: all 0.3s;\n  border: none;\n  background: none;\n}\n\n.sidebar .nav-link:hover,\n.sidebar .nav-link.active {\n  color: hsl(0, 0%, 100%);\n  background-color: hsla(0, 0%, 100%, 0.1);\n  transform: translateX(5px);\n}\n\n.main-content {\n  margin-left: 250px;\n  padding: 20px;\n  transition: all 0.3s;\n}\n\n.card {\n  border: none;\n  border-radius: 15px;\n  box-shadow: 0 4px 6px hsla(0, 0%, 0%, 0.1);\n  transition: transform 0.3s, box-shadow 0.3s;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 15px hsla(0, 0%, 0%, 0.15);\n}\n\n.stats-card {\n  background: linear-gradient(135deg, hsl(260, 86%, 72%) 0%, hsl(264, 46%, 48%) 100%);\n  color: hsl(0, 0%, 100%);\n}\n\n.stats-card-success {\n  background: linear-gradient(135deg, hsl(172, 85%, 33%) 0%, hsl(130, 88%, 59%) 100%);\n}\n\n.stats-card-warning {\n  background: linear-gradient(135deg, hsl(25, 95%, 53%) 0%, hsl(0, 99%, 54%) 100%);\n}\n\n.stats-card-info {\n  background: linear-gradient(135deg, hsl(260, 86%, 72%) 0%, hsl(264, 46%, 48%) 100%);\n}\n\n.table-responsive {\n  border-radius: 15px;\n  overflow: hidden;\n}\n\n.btn-action {\n  padding: 5px 10px;\n  font-size: 0.875rem;\n  border-radius: 8px;\n}\n\n.stock-low {\n  background-color: hsl(45, 100%, 88%);\n  border-left: 4px solid hsl(45, 100%, 51%);\n}\n\n.stock-out {\n  background-color: hsl(354, 70%, 87%);\n  border-left: 4px solid hsl(348, 83%, 47%);\n}\n\n.login-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, hsl(260, 86%, 72%) 0%, hsl(264, 46%, 48%) 100%);\n}\n\n.login-card {\n  backdrop-filter: blur(10px);\n  background: hsla(0, 0%, 100%, 0.95);\n  border-radius: 20px;\n  box-shadow: 0 20px 40px hsla(0, 0%, 0%, 0.1);\n}\n\n.chart-container {\n  height: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: hsl(60, 4.8%, 95.9%);\n  border-radius: 10px;\n}\n\n@media (max-width: 768px) {\n  .sidebar {\n    margin-left: -250px;\n  }\n  \n  .sidebar.show {\n    margin-left: 0;\n  }\n  \n  .main-content {\n    margin-left: 0;\n  }\n}\n\n.navbar-toggler {\n  display: none;\n}\n\n@media (max-width: 768px) {\n  .navbar-toggler {\n    display: block;\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    z-index: 1001;\n    background: hsl(0, 0%, 100%);\n    border: none;\n    padding: 8px 12px;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px hsla(0, 0%, 0%, 0.1);\n  }\n}\n\n/* Bootstrap components integration */\n.form-control,\n.form-select {\n  border-radius: var(--radius);\n  border: 1px solid var(--border);\n}\n\n.btn-primary {\n  background-color: var(--primary);\n  border-color: var(--primary);\n  color: var(--primary-foreground);\n}\n\n.btn-primary:hover {\n  background-color: hsl(207, 90%, 48%);\n  border-color: hsl(207, 90%, 48%);\n}\n\n.badge {\n  border-radius: var(--radius);\n}\n\n.input-group-text {\n  background-color: var(--muted);\n  border-color: var(--border);\n  color: var(--muted-foreground);\n}\n\n.table {\n  color: var(--foreground);\n}\n\n.table-light {\n  background-color: var(--muted);\n  color: var(--foreground);\n}\n\n.modal-content {\n  border-radius: 15px;\n  border: none;\n  box-shadow: 0 10px 30px hsla(0, 0%, 0%, 0.2);\n}\n","size_bytes":6610},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);","size_bytes":155},"client/src/components/ProtectedRoute.jsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function ProtectedRoute({ children, requireRole }) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!user) {\n        setLocation(\"/login\");\n        return;\n      }\n\n      if (requireRole && user.role !== requireRole) {\n        // Redirect based on user role\n        if (user.role === \"admin\") {\n          setLocation(\"/admin\");\n        } else {\n          setLocation(\"/shopkeeper\");\n        }\n        return;\n      }\n    }\n  }, [user, isLoading, requireRole, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n          <p className=\"mt-2\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || (requireRole && user.role !== requireRole)) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1189},"client/src/contexts/AuthContext.jsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst AuthContext = createContext(undefined);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        const response = await fetch(\"/api/auth/me\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData);\n        } else {\n          localStorage.removeItem(\"token\");\n        }\n      }\n    } catch (error) {\n      localStorage.removeItem(\"token\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        email,\n        password,\n      });\n      const data = await response.json();\n      \n      localStorage.setItem(\"token\", data.token);\n      setUser(data.user);\n    } catch (error) {\n      throw new Error(\"Invalid credentials\");\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1706},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":544},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\nimport {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\n// ToasterToast interface defined inline where used\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\n// Action and state definitions moved to runtime only\n\nconst toastTimeouts = new Map()\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners = []\n\nlet memoryState = { toasts: [] }\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nfunction toast({ ...props }) {\n  const id = genId()\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3226},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method,\n  url,\n  data\n) {\n  const token = localStorage.getItem(\"token\");\n  const headers = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\nexport const getQueryFn = (options) => async ({ queryKey }) => {\n  const { on401: unauthorizedBehavior } = options;\n  const token = localStorage.getItem(\"token\");\n  const headers = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\"), {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1517},"client/src/lib/utils.ts":{"content":"import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":135},"client/src/pages/Login.jsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"admin@shopmanager.com\");\n  const [password, setPassword] = useState(\"admin123\");\n  const [role, setRole] = useState(\"admin\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const updateDemoCredentials = (selectedRole) => {\n    setRole(selectedRole);\n    if (selectedRole === \"admin\") {\n      setEmail(\"admin@shopmanager.com\");\n      setPassword(\"admin123\");\n    } else {\n      setEmail(\"shop@dairy.com\");\n      setPassword(\"shop123\");\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      \n      // Redirect based on role\n      if (role === \"admin\") {\n        setLocation(\"/admin/dashboard\");\n      } else {\n        setLocation(\"/shopkeeper/dashboard\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container d-flex align-items-center justify-content-center min-vh-100\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-6 col-lg-4\">\n            <Card className=\"login-card\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center mb-4\">\n                  <h2 className=\"fw-bold text-primary\">\n                    <i className=\"fas fa-store me-2\"></i>\n                    ShopManager Pro\n                  </h2>\n                  <p className=\"text-muted\">Sign in to your account</p>\n                </div>\n                \n                <form onSubmit={handleSubmit}>\n                  <div className=\"mb-3\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <div className=\"input-group\">\n                      <span className=\"input-group-text\">\n                        <i className=\"fas fa-envelope\"></i>\n                      </span>\n                      <Input\n                        type=\"email\"\n                        id=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                        className=\"form-control\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"input-group\">\n                      <span className=\"input-group-text\">\n                        <i className=\"fas fa-lock\"></i>\n                      </span>\n                      <Input\n                        type=\"password\"\n                        id=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                        className=\"form-control\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    <Label htmlFor=\"role\">Login as</Label>\n                    <select \n                      className=\"form-select\" \n                      id=\"role\" \n                      value={role}\n                      onChange={(e) => updateDemoCredentials(e.target.value)}\n                    >\n                      <option value=\"admin\">Admin</option>\n                      <option value=\"shopkeeper\">Shopkeeper</option>\n                    </select>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-100 py-2 fw-bold\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <>\n                        <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n                        Signing In...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-sign-in-alt me-2\"></i>\n                        Sign In\n                      </>\n                    )}\n                  </Button>\n                </form>\n                \n                <div className=\"mt-4 p-3 bg-light rounded\">\n                  <h6 className=\"fw-bold mb-2\">Demo Credentials:</h6>\n                  <small className=\"text-muted\">\n                    <strong>Admin:</strong> admin@shopmanager.com / admin123<br />\n                    <strong>Shopkeeper:</strong> shop@dairy.com / shop123\n                  </small>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5343},"client/src/pages/not-found.jsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/Layout/AdminSidebar.jsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function AdminSidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const isActive = (path) => location === path;\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"p-3 border-bottom border-secondary\">\n        <h4 className=\"text-white mb-0\">\n          <i className=\"fas fa-store me-2\"></i>\n          ShopManager Pro\n        </h4>\n        <small className=\"text-muted\">Admin Panel</small>\n      </div>\n      \n      <nav className=\"nav flex-column p-3\">\n        <Link href=\"/admin/dashboard\" className={`nav-link ${isActive('/admin/dashboard') ? 'active' : ''}`}>\n          <i className=\"fas fa-tachometer-alt me-2\"></i>\n          Dashboard\n        </Link>\n        \n        <Link href=\"/admin/shops\" className={`nav-link ${isActive('/admin/shops') ? 'active' : ''}`}>\n          <i className=\"fas fa-building me-2\"></i>\n          Manage Shops\n        </Link>\n        \n        <Link href=\"/admin/stock\" className={`nav-link ${isActive('/admin/stock') ? 'active' : ''}`}>\n          <i className=\"fas fa-boxes me-2\"></i>\n          Stock Management\n        </Link>\n        \n        <Link href=\"/admin/orders\" className={`nav-link ${isActive('/admin/orders') ? 'active' : ''}`}>\n          <i className=\"fas fa-shopping-cart me-2\"></i>\n          Orders\n        </Link>\n        \n        <Link href=\"/admin/users\" className={`nav-link ${isActive('/admin/users') ? 'active' : ''}`}>\n          <i className=\"fas fa-users me-2\"></i>\n          User Management\n        </Link>\n        \n        <Link href=\"/admin/reports\" className={`nav-link ${isActive('/admin/reports') ? 'active' : ''}`}>\n          <i className=\"fas fa-chart-bar me-2\"></i>\n          Reports\n        </Link>\n      </nav>\n\n      <div className=\"mt-auto p-3 border-top border-secondary\">\n        <div className=\"d-flex align-items-center mb-3\">\n          <div className=\"bg-primary rounded-circle d-flex align-items-center justify-content-center me-3\" \n               style={{ width: \"40px\", height: \"40px\" }}>\n            <i className=\"fas fa-user text-white\"></i>\n          </div>\n          <div>\n            <div className=\"text-white fw-semibold\">{user?.name}</div>\n            <small className=\"text-muted\">{user?.email}</small>\n          </div>\n        </div>\n        <button \n          onClick={logout}\n          className=\"btn btn-outline-light btn-sm w-100\"\n        >\n          <i className=\"fas fa-sign-out-alt me-2\"></i>\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":2608},"client/src/components/Layout/AdminSidebar.tsx":{"content":"import Sidebar from \"./Sidebar\";\n\nexport default function AdminSidebar() {\n  const sidebarItems = [\n    {\n      href: \"/admin\",\n      icon: \"fas fa-tachometer-alt\",\n      label: \"Dashboard\",\n    },\n    {\n      href: \"/admin/shops\",\n      icon: \"fas fa-store\",\n      label: \"Manage Shops\",\n    },\n    {\n      href: \"/admin/products\",\n      icon: \"fas fa-box\",\n      label: \"All Products\",\n    },\n    {\n      href: \"/admin/categories\",\n      icon: \"fas fa-tags\",\n      label: \"Categories\",\n    },\n    {\n      href: \"/admin/stock\",\n      icon: \"fas fa-warehouse\",\n      label: \"Stock Management\",\n    },\n    {\n      href: \"/admin/orders\",\n      icon: \"fas fa-shopping-cart\",\n      label: \"Orders\",\n    },\n    {\n      href: \"/admin/users\",\n      icon: \"fas fa-users\",\n      label: \"User Management\",\n    },\n    {\n      href: \"/admin/reports\",\n      icon: \"fas fa-chart-line\",\n      label: \"Sales Reports\",\n    },\n    {\n      href: \"/admin/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Settings\",\n    },\n  ];\n\n  return (\n    <Sidebar\n      title=\"Admin Panel\"\n      subtitle=\"Welcome, Admin\"\n      items={sidebarItems}\n    />\n  );\n}\n","size_bytes":1133},"client/src/components/Layout/ShopkeeperSidebar.jsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function ShopkeeperSidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const isActive = (path) => location === path;\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"p-3 border-bottom border-secondary\">\n        <h4 className=\"text-white mb-0\">\n          <i className=\"fas fa-store me-2\"></i>\n          ShopManager Pro\n        </h4>\n        <small className=\"text-muted\">Shopkeeper Panel</small>\n      </div>\n      \n      <nav className=\"nav flex-column p-3\">\n        <Link href=\"/shopkeeper/dashboard\" className={`nav-link ${isActive('/shopkeeper/dashboard') ? 'active' : ''}`}>\n          <i className=\"fas fa-tachometer-alt me-2\"></i>\n          Dashboard\n        </Link>\n        \n        <Link href=\"/shopkeeper/products\" className={`nav-link ${isActive('/shopkeeper/products') ? 'active' : ''}`}>\n          <i className=\"fas fa-box me-2\"></i>\n          My Products\n        </Link>\n        \n        <Link href=\"/shopkeeper/add-product\" className={`nav-link ${isActive('/shopkeeper/add-product') ? 'active' : ''}`}>\n          <i className=\"fas fa-plus me-2\"></i>\n          Add Product\n        </Link>\n        \n        <Link href=\"/shopkeeper/orders\" className={`nav-link ${isActive('/shopkeeper/orders') ? 'active' : ''}`}>\n          <i className=\"fas fa-shopping-cart me-2\"></i>\n          Orders\n        </Link>\n        \n        <Link href=\"/shopkeeper/stock\" className={`nav-link ${isActive('/shopkeeper/stock') ? 'active' : ''}`}>\n          <i className=\"fas fa-exclamation-triangle me-2\"></i>\n          Stock Alerts\n        </Link>\n        \n        <Link href=\"/shopkeeper/billing\" className={`nav-link ${isActive('/shopkeeper/billing') ? 'active' : ''}`}>\n          <i className=\"fas fa-file-invoice-dollar me-2\"></i>\n          Billing\n        </Link>\n        \n        <Link href=\"/shopkeeper/customers\" className={`nav-link ${isActive('/shopkeeper/customers') ? 'active' : ''}`}>\n          <i className=\"fas fa-users me-2\"></i>\n          Customers\n        </Link>\n        \n        <Link href=\"/shopkeeper/add-customer\" className={`nav-link ${isActive('/shopkeeper/add-customer') ? 'active' : ''}`}>\n          <i className=\"fas fa-user-plus me-2\"></i>\n          Add Customer\n        </Link>\n        \n        <Link href=\"/shopkeeper/reports\" className={`nav-link ${isActive('/shopkeeper/reports') ? 'active' : ''}`}>\n          <i className=\"fas fa-chart-line me-2\"></i>\n          Sales Report\n        </Link>\n      </nav>\n\n      <div className=\"mt-auto p-3 border-top border-secondary\">\n        <div className=\"d-flex align-items-center mb-3\">\n          <div className=\"bg-success rounded-circle d-flex align-items-center justify-content-center me-3\" \n               style={{ width: \"40px\", height: \"40px\" }}>\n            <i className=\"fas fa-user text-white\"></i>\n          </div>\n          <div>\n            <div className=\"text-white fw-semibold\">{user?.name}</div>\n            <small className=\"text-muted\">{user?.email}</small>\n          </div>\n        </div>\n        <button \n          onClick={logout}\n          className=\"btn btn-outline-light btn-sm w-100\"\n        >\n          <i className=\"fas fa-sign-out-alt me-2\"></i>\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":3362},"client/src/components/Layout/ShopkeeperSidebar.tsx":{"content":"import Sidebar from \"./Sidebar\";\n\nexport default function ShopkeeperSidebar() {\n  const sidebarItems = [\n    {\n      href: \"/shopkeeper\",\n      icon: \"fas fa-tachometer-alt\",\n      label: \"Dashboard\",\n    },\n    {\n      href: \"/shopkeeper/products\",\n      icon: \"fas fa-box\",\n      label: \"My Products\",\n    },\n    {\n      href: \"/shopkeeper/add-product\",\n      icon: \"fas fa-plus\",\n      label: \"Add New Product\",\n    },\n    {\n      href: \"/shopkeeper/categories\",\n      icon: \"fas fa-tags\",\n      label: \"Category Management\",\n    },\n    {\n      href: \"/shopkeeper/stock\",\n      icon: \"fas fa-warehouse\",\n      label: \"Stock Management\",\n    },\n    {\n      href: \"/shopkeeper/orders\",\n      icon: \"fas fa-shopping-cart\",\n      label: \"Orders\",\n    },\n    {\n      href: \"/shopkeeper/sales\",\n      icon: \"fas fa-chart-line\",\n      label: \"Sales Summary\",\n    },\n    {\n      href: \"/shopkeeper/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Settings\",\n    },\n  ];\n\n  return (\n    <Sidebar\n      title=\"My Shop\"\n      subtitle=\"Fresh Dairy Shop\"\n      items={sidebarItems}\n    />\n  );\n}\n","size_bytes":1089},"client/src/components/Layout/Sidebar.jsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Sidebar({ title, subtitle, items, className }) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  return (\n    <nav className={cn(\"sidebar\", className)}>\n      <div className=\"p-3\">\n        <h4 className=\"text-white fw-bold\">\n          <i className=\"fas fa-store me-2\"></i>\n          {title}\n        </h4>\n        <small className=\"text-white-50\">{subtitle}</small>\n      </div>\n      \n      <ul className=\"nav flex-column\">\n        {items.map((item) => (\n          <li key={item.href} className=\"nav-item\">\n            {item.onClick ? (\n              <button\n                onClick={item.onClick}\n                className={cn(\n                  \"nav-link w-100 text-start\",\n                  location === item.href && \"active\"\n                )}\n              >\n                <i className={`${item.icon} me-2`}></i>\n                {item.label}\n              </button>\n            ) : (\n              <Link\n                href={item.href}\n                className={cn(\n                  \"nav-link\",\n                  location === item.href && \"active\"\n                )}\n              >\n                <i className={`${item.icon} me-2`}></i>\n                {item.label}\n              </Link>\n            )}\n          </li>\n        ))}\n        \n        <li className=\"nav-item mt-3\">\n          <button\n            onClick={logout}\n            className=\"nav-link w-100 text-start\"\n          >\n            <i className=\"fas fa-sign-out-alt me-2\"></i>\n            Logout\n          </button>\n        </li>\n      </ul>\n    </nav>\n  );\n}","size_bytes":1715},"client/src/components/Layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarItem {\n  href: string;\n  icon: string;\n  label: string;\n  onClick?: () => void;\n}\n\ninterface SidebarProps {\n  title: string;\n  subtitle: string;\n  items: SidebarItem[];\n  className?: string;\n}\n\nexport default function Sidebar({ title, subtitle, items, className }: SidebarProps) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  return (\n    <nav className={cn(\"sidebar\", className)}>\n      <div className=\"p-3\">\n        <h4 className=\"text-white fw-bold\">\n          <i className=\"fas fa-store me-2\"></i>\n          {title}\n        </h4>\n        <small className=\"text-white-50\">{subtitle}</small>\n      </div>\n      \n      <ul className=\"nav flex-column\">\n        {items.map((item) => (\n          <li key={item.href} className=\"nav-item\">\n            {item.onClick ? (\n              <button\n                onClick={item.onClick}\n                className={cn(\n                  \"nav-link w-100 text-start\",\n                  location === item.href && \"active\"\n                )}\n              >\n                <i className={`${item.icon} me-2`}></i>\n                {item.label}\n              </button>\n            ) : (\n              <Link\n                href={item.href}\n                className={cn(\n                  \"nav-link\",\n                  location === item.href && \"active\"\n                )}\n              >\n                <i className={`${item.icon} me-2`}></i>\n                {item.label}\n              </Link>\n            )}\n          </li>\n        ))}\n        \n        <li className=\"nav-item mt-3\">\n          <button\n            onClick={logout}\n            className=\"nav-link w-100 text-start\"\n          >\n            <i className=\"fas fa-sign-out-alt me-2\"></i>\n            Logout\n          </button>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","size_bytes":1941},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.jsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function StatsCard({ title, value, icon, variant = \"default\" }) {\n  const getVariantClasses = () => {\n    switch (variant) {\n      case \"success\":\n        return \"border-success\";\n      case \"warning\":\n        return \"border-warning\";\n      case \"danger\":\n        return \"border-danger\";\n      default:\n        return \"border-primary\";\n    }\n  };\n\n  const getIconClasses = () => {\n    switch (variant) {\n      case \"success\":\n        return \"text-success\";\n      case \"warning\":\n        return \"text-warning\";\n      case \"danger\":\n        return \"text-danger\";\n      default:\n        return \"text-primary\";\n    }\n  };\n\n  return (\n    <Card className={`dashboard-card ${getVariantClasses()}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <div>\n            <p className=\"text-muted mb-1 small\">{title}</p>\n            <h3 className=\"fw-bold mb-0\">{value}</h3>\n          </div>\n          <div className={`fs-1 ${getIconClasses()}`}>\n            <i className={icon}></i>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1190},"client/src/components/ui/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: string;\n  variant?: \"default\" | \"success\" | \"warning\" | \"info\";\n  className?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  icon, \n  variant = \"default\",\n  className \n}: StatsCardProps) {\n  return (\n    <Card className={cn(\n      \"stats-card text-white\",\n      variant === \"success\" && \"stats-card-success\",\n      variant === \"warning\" && \"stats-card-warning\", \n      variant === \"info\" && \"stats-card-info\",\n      className\n    )}>\n      <CardContent className=\"p-4 text-center\">\n        <i className={`${icon} fa-2x mb-2`}></i>\n        <h3 className=\"fw-bold\">{value}</h3>\n        <p className=\"mb-0\">{title}</p>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":850},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/AdminDashboard.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport StatsCard from \"@/components/ui/stats-card\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nexport default function AdminDashboard() {\n  const [selectedShopId, setSelectedShopId] = useState(\"all\");\n\n  // Fetch all shops for the dropdown\n  const { data: shops = [] } = useQuery({\n    queryKey: [\"/api/shops\"],\n  });\n\n  // Build query URLs based on selected shop\n  const statsUrl = selectedShopId === \"all\" \n    ? \"/api/dashboard/stats\" \n    : `/api/dashboard/stats?shopId=${selectedShopId}`;\n    \n  const ordersUrl = selectedShopId === \"all\"\n    ? \"/api/orders\"\n    : `/api/orders/shop/${selectedShopId}`;\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [statsUrl],\n  });\n\n  const { data: recentOrders = [] } = useQuery({\n    queryKey: [ordersUrl],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen d-flex\">\n        <AdminSidebar />\n        <div className=\"main-content\">\n          <div className=\"d-flex justify-content-center align-items-center\" style={{ height: \"50vh\" }}>\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">\n              Admin Dashboard\n              {selectedShopId !== \"all\" && stats?.shopName && (\n                <span className=\"text-muted fs-6 ms-2\">\n                  - {stats.shopName} ({stats.shopType})\n                </span>\n              )}\n            </h2>\n          </div>\n          <div className=\"d-flex align-items-center gap-3\">\n            <div className=\"d-flex align-items-center\">\n              <label htmlFor=\"shopSelect\" className=\"form-label me-2 mb-0\">View Shop:</label>\n              <select \n                id=\"shopSelect\"\n                className=\"form-select form-select-sm\"\n                value={selectedShopId}\n                onChange={(e) => setSelectedShopId(e.target.value)}\n                style={{ minWidth: \"200px\" }}\n              >\n                <option value=\"all\">All Shops</option>\n                {shops.map((shop) => (\n                  <option key={shop.id} value={shop.id}>\n                    {shop.name} ({shop.type})\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <span className=\"badge bg-success\">Online</span>\n              <span className=\"text-muted ms-2\">{new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Shops\"\n              value={stats?.totalShops || 0}\n              icon=\"fas fa-store\"\n              variant=\"default\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Revenue\"\n              value={`$${stats?.totalRevenue || \"0.00\"}`}\n              icon=\"fas fa-dollar-sign\"\n              variant=\"success\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Orders\"\n              value={stats?.totalOrders || 0}\n              icon=\"fas fa-shopping-cart\"\n              variant=\"warning\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Low Stock Alert\"\n              value={stats?.lowStockCount || 0}\n              icon=\"fas fa-exclamation-triangle\"\n              variant=\"danger\"\n            />\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"row\">\n          <div className=\"col-lg-8 mb-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <h5 className=\"fw-bold mb-0\">Recent Orders</h5>\n                  <a href=\"/admin/orders\" className=\"btn btn-outline-primary btn-sm\">\n                    View All\n                  </a>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {recentOrders.length > 0 ? (\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                      <thead className=\"table-light\">\n                        <tr>\n                          <th>Order ID</th>\n                          <th>Customer</th>\n                          <th>Shop</th>\n                          <th>Amount</th>\n                          <th>Status</th>\n                          <th>Date</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {recentOrders.slice(0, 5).map((order) => (\n                          <tr key={order.id}>\n                            <td><strong>#{order.id}</strong></td>\n                            <td>{order.customerName}</td>\n                            <td>\n                              <span className=\"badge bg-secondary\">{order.shopName}</span>\n                            </td>\n                            <td><strong>${order.total}</strong></td>\n                            <td>\n                              <span className={`badge ${\n                                order.status === 'completed' ? 'bg-success' :\n                                order.status === 'pending' ? 'bg-warning' :\n                                'bg-info'\n                              }`}>\n                                {order.status}\n                              </span>\n                            </td>\n                            <td>{new Date(order.createdAt).toLocaleDateString()}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted py-4\">\n                    <i className=\"fas fa-shopping-cart fs-1 mb-3\"></i>\n                    <p>No recent orders</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"col-lg-4 mb-4\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Quick Actions</h5>\n              </CardHeader>\n              <CardContent>\n                <div className=\"d-grid gap-2\">\n                  <a href=\"/admin/shops\" className=\"btn btn-outline-primary\">\n                    <i className=\"fas fa-plus me-2\"></i>Add New Shop\n                  </a>\n                  <a href=\"/admin/stock\" className=\"btn btn-outline-warning\">\n                    <i className=\"fas fa-exclamation-triangle me-2\"></i>Check Stock Alerts\n                  </a>\n                  <a href=\"/admin/reports\" className=\"btn btn-outline-info\">\n                    <i className=\"fas fa-chart-bar me-2\"></i>View Reports\n                  </a>\n                  <a href=\"/admin/users\" className=\"btn btn-outline-secondary\">\n                    <i className=\"fas fa-users me-2\"></i>Manage Users\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7692},"client/src/pages/admin/ManageShops.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ManageShops() {\n  const { toast } = useToast();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingShop, setEditingShop] = useState(null);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    type: \"dairy\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    description: \"\",\n    ownerId: null,\n  });\n\n  const { data: shops = [], isLoading } = useQuery({\n    queryKey: [\"/api/shops\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createShopMutation = useMutation({\n    mutationFn: (shopData) => apiRequest(\"POST\", \"/api/shops\", shopData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shops\"] });\n      toast({ title: \"Success\", description: \"Shop created successfully!\" });\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create shop\", variant: \"destructive\" });\n    },\n  });\n\n  const updateShopMutation = useMutation({\n    mutationFn: ({ id, ...shopData }) => apiRequest(\"PUT\", `/api/shops/${id}`, shopData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shops\"] });\n      toast({ title: \"Success\", description: \"Shop updated successfully!\" });\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update shop\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteShopMutation = useMutation({\n    mutationFn: (id) => apiRequest(\"DELETE\", `/api/shops/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shops\"] });\n      toast({ title: \"Success\", description: \"Shop deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete shop\", variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      type: \"dairy\",\n      address: \"\",\n      phone: \"\",\n      email: \"\",\n      description: \"\",\n      ownerId: null,\n    });\n    setShowAddForm(false);\n    setEditingShop(null);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (editingShop) {\n      updateShopMutation.mutate({ id: editingShop.id, ...formData });\n    } else {\n      createShopMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (shop) => {\n    setFormData({\n      name: shop.name,\n      type: shop.type,\n      address: shop.address || \"\",\n      phone: shop.phone || \"\",\n      email: shop.email || \"\",\n      description: shop.description || \"\",\n      ownerId: shop.ownerId,\n    });\n    setEditingShop(shop);\n    setShowAddForm(true);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const getShopTypeIcon = (type) => {\n    switch (type) {\n      case 'dairy': return 'fas fa-cheese';\n      case 'meat': return 'fas fa-drumstick-bite';\n      case 'grocery': return 'fas fa-shopping-basket';\n      default: return 'fas fa-store';\n    }\n  };\n\n  const getShopTypeBadge = (type) => {\n    switch (type) {\n      case 'dairy': return 'bg-info';\n      case 'meat': return 'bg-danger';\n      case 'grocery': return 'bg-success';\n      default: return 'bg-secondary';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <h2 className=\"fw-bold\">Manage Shops</h2>\n          <Button \n            onClick={() => setShowAddForm(true)}\n            className=\"btn-primary\"\n          >\n            <i className=\"fas fa-plus me-2\"></i>Add New Shop\n          </Button>\n        </div>\n\n        {/* Add/Edit Shop Form */}\n        {showAddForm && (\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <h5 className=\"fw-bold mb-0\">\n                  {editingShop ? 'Edit Shop' : 'Add New Shop'}\n                </h5>\n                <Button variant=\"outline\" size=\"sm\" onClick={resetForm}>\n                  <i className=\"fas fa-times\"></i>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit}>\n                <div className=\"row\">\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"name\">Shop Name *</Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      placeholder=\"Enter shop name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"type\">Shop Type *</Label>\n                    <select\n                      id=\"type\"\n                      className=\"form-select\"\n                      value={formData.type}\n                      onChange={(e) => handleInputChange('type', e.target.value)}\n                      required\n                    >\n                      <option value=\"dairy\">Dairy</option>\n                      <option value=\"meat\">Meat Market</option>\n                      <option value=\"grocery\">Grocery Store</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"Phone number\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                    />\n                  </div>\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Email address\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    placeholder=\"Shop address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    rows={2}\n                  />\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"ownerId\">Shop Owner</Label>\n                    <select\n                      id=\"ownerId\"\n                      className=\"form-select\"\n                      value={formData.ownerId || \"\"}\n                      onChange={(e) => handleInputChange('ownerId', parseInt(e.target.value) || null)}\n                    >\n                      <option value=\"\">Select an owner</option>\n                      {users.filter(user => user.role === 'shopkeeper').map((user) => (\n                        <option key={user.id} value={user.id}>\n                          {user.name} ({user.email})\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"Shop description\"\n                      value={formData.description}\n                      onChange={(e) => handleInputChange('description', e.target.value)}\n                      rows={2}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"d-flex gap-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createShopMutation.isPending || updateShopMutation.isPending}\n                    className=\"btn-primary\"\n                  >\n                    {editingShop ? 'Update Shop' : 'Create Shop'}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Shops List */}\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">All Shops ({shops.length})</h5>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : shops.length > 0 ? (\n              <div className=\"row\">\n                {shops.map((shop) => (\n                  <div key={shop.id} className=\"col-lg-6 mb-3\">\n                    <Card className=\"dashboard-card h-100\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"d-flex justify-content-between align-items-start mb-3\">\n                          <div className=\"d-flex align-items-center\">\n                            <div className=\"me-3\">\n                              <i className={`${getShopTypeIcon(shop.type)} fs-2 text-primary`}></i>\n                            </div>\n                            <div>\n                              <h6 className=\"fw-bold mb-1\">{shop.name}</h6>\n                              <span className={`badge ${getShopTypeBadge(shop.type)}`}>\n                                {shop.type.charAt(0).toUpperCase() + shop.type.slice(1)}\n                              </span>\n                            </div>\n                          </div>\n                          <div className=\"dropdown\">\n                            <button \n                              className=\"btn btn-outline-secondary btn-sm dropdown-toggle\"\n                              type=\"button\"\n                              data-bs-toggle=\"dropdown\"\n                            >\n                              <i className=\"fas fa-ellipsis-v\"></i>\n                            </button>\n                            <ul className=\"dropdown-menu\">\n                              <li>\n                                <button \n                                  className=\"dropdown-item\"\n                                  onClick={() => handleEdit(shop)}\n                                >\n                                  <i className=\"fas fa-edit me-2\"></i>Edit\n                                </button>\n                              </li>\n                              <li>\n                                <button \n                                  className=\"dropdown-item text-danger\"\n                                  onClick={() => {\n                                    if (window.confirm('Are you sure you want to delete this shop?')) {\n                                      deleteShopMutation.mutate(shop.id);\n                                    }\n                                  }}\n                                >\n                                  <i className=\"fas fa-trash me-2\"></i>Delete\n                                </button>\n                              </li>\n                            </ul>\n                          </div>\n                        </div>\n                        \n                        {shop.address && (\n                          <p className=\"small text-muted mb-2\">\n                            <i className=\"fas fa-map-marker-alt me-2\"></i>{shop.address}\n                          </p>\n                        )}\n                        \n                        {shop.phone && (\n                          <p className=\"small text-muted mb-2\">\n                            <i className=\"fas fa-phone me-2\"></i>{shop.phone}\n                          </p>\n                        )}\n                        \n                        {shop.email && (\n                          <p className=\"small text-muted mb-2\">\n                            <i className=\"fas fa-envelope me-2\"></i>{shop.email}\n                          </p>\n                        )}\n\n                        {shop.ownerId && (\n                          <p className=\"small text-muted mb-2\">\n                            <i className=\"fas fa-user me-2\"></i>\n                            Owner: {users.find(u => u.id === shop.ownerId)?.name || 'Unknown'}\n                          </p>\n                        )}\n\n                        <div className=\"mt-3 d-flex justify-content-between text-muted small\">\n                          <span>\n                            <i className=\"fas fa-calendar me-1\"></i>\n                            {new Date(shop.createdAt).toLocaleDateString()}\n                          </span>\n                          <span className={`badge ${shop.isActive ? 'bg-success' : 'bg-secondary'}`}>\n                            {shop.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-5\">\n                <i className=\"fas fa-store fs-1 mb-3\"></i>\n                <p>No shops found. Add your first shop to get started!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14445},"client/src/pages/admin/ManageShops.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Shop } from \"@shared/schema\";\n\nexport default function ManageShops() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    type: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    ownerId: 1, // This should be dynamically set\n  });\n\n  const { toast } = useToast();\n\n  const { data: shops = [], isLoading } = useQuery<Shop[]>({\n    queryKey: [\"/api/shops\"],\n  });\n\n  const createShopMutation = useMutation({\n    mutationFn: async (shopData: typeof formData) => {\n      return apiRequest(\"POST\", \"/api/shops\", shopData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shops\"] });\n      setIsAddDialogOpen(false);\n      setFormData({\n        name: \"\",\n        type: \"\",\n        address: \"\",\n        phone: \"\",\n        email: \"\",\n        ownerId: 1,\n      });\n      toast({\n        title: \"Success\",\n        description: \"Shop created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create shop\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteShopMutation = useMutation({\n    mutationFn: async (shopId: number) => {\n      return apiRequest(\"DELETE\", `/api/shops/${shopId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shops\"] });\n      toast({\n        title: \"Success\",\n        description: \"Shop deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete shop\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createShopMutation.mutate(formData);\n  };\n\n  const handleDelete = (shopId: number) => {\n    if (confirm(\"Are you sure you want to delete this shop?\")) {\n      deleteShopMutation.mutate(shopId);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <h2 className=\"fw-bold\">Manage Shops</h2>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <i className=\"fas fa-plus me-2\"></i>Add New Shop\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"modal-lg\">\n              <DialogHeader>\n                <DialogTitle>\n                  <i className=\"fas fa-store me-2\"></i>Add New Shop\n                </DialogTitle>\n              </DialogHeader>\n              \n              <form onSubmit={handleSubmit}>\n                <div className=\"row mb-3\">\n                  <div className=\"col-md-6\">\n                    <Label htmlFor=\"shopName\">Shop Name</Label>\n                    <Input\n                      id=\"shopName\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Label htmlFor=\"shopType\">Shop Type</Label>\n                    <select \n                      className=\"form-select\" \n                      id=\"shopType\"\n                      value={formData.type}\n                      onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                      required\n                    >\n                      <option value=\"\">Select type</option>\n                      <option value=\"dairy\">Dairy</option>\n                      <option value=\"meat\">Meat</option>\n                      <option value=\"grocery\">Grocery</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <div className=\"row mb-3\">\n                  <div className=\"col-md-6\">\n                    <Label htmlFor=\"shopPhone\">Phone Number</Label>\n                    <Input\n                      type=\"tel\"\n                      id=\"shopPhone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Label htmlFor=\"shopEmail\">Email</Label>\n                    <Input\n                      type=\"email\"\n                      id=\"shopEmail\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"mb-3\">\n                  <Label htmlFor=\"shopAddress\">Address</Label>\n                  <textarea\n                    className=\"form-control\"\n                    id=\"shopAddress\"\n                    rows={3}\n                    value={formData.address}\n                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                    required\n                  />\n                </div>\n                \n                <div className=\"d-flex gap-2\">\n                  <Button type=\"submit\" disabled={createShopMutation.isPending}>\n                    {createShopMutation.isPending ? (\n                      <>\n                        <span className=\"spinner-border spinner-border-sm me-2\"></span>\n                        Adding...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-save me-2\"></i>Add Shop\n                      </>\n                    )}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setIsAddDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Shop Name</th>\n                      <th>Type</th>\n                      <th>Phone</th>\n                      <th>Email</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {shops.map((shop) => (\n                      <tr key={shop.id}>\n                        <td>{shop.name}</td>\n                        <td>\n                          <span className={`badge ${\n                            shop.type === 'dairy' ? 'bg-info' :\n                            shop.type === 'meat' ? 'bg-danger' : 'bg-success'\n                          }`}>\n                            {shop.type}\n                          </span>\n                        </td>\n                        <td>{shop.phone}</td>\n                        <td>{shop.email}</td>\n                        <td>\n                          <span className={`badge ${shop.isActive ? 'bg-success' : 'bg-warning'}`}>\n                            {shop.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td>\n                          <button className=\"btn btn-sm btn-outline-primary btn-action me-1\">\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          <button \n                            className=\"btn btn-sm btn-outline-danger btn-action\"\n                            onClick={() => handleDelete(shop.id)}\n                            disabled={deleteShopMutation.isPending}\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                    {shops.length === 0 && (\n                      <tr>\n                        <td colSpan={6} className=\"text-center text-muted py-4\">\n                          No shops found\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9565},"client/src/pages/admin/Orders.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Orders() {\n  const [selectedShopId, setSelectedShopId] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  // Fetch all shops for the dropdown\n  const { data: shops = [] } = useQuery({\n    queryKey: [\"/api/shops\"],\n  });\n\n  // Build query URL based on selected shop\n  const ordersUrl = selectedShopId === \"all\"\n    ? \"/api/orders\"\n    : `/api/orders/shop/${selectedShopId}`;\n\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: [ordersUrl],\n  });\n\n  // Filter orders by status if selected\n  const filteredOrders = selectedStatus === \"all\" \n    ? orders \n    : orders.filter(order => order.status === selectedStatus);\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">\n              All Orders\n              {selectedShopId !== \"all\" && shops.length > 0 && (\n                <span className=\"text-muted fs-6 ms-2\">\n                  - {shops.find(s => s.id.toString() === selectedShopId)?.name}\n                </span>\n              )}\n            </h2>\n          </div>\n          <div className=\"d-flex align-items-center gap-3\">\n            <div className=\"d-flex align-items-center\">\n              <label htmlFor=\"shopSelect\" className=\"form-label me-2 mb-0\">Shop:</label>\n              <select \n                id=\"shopSelect\"\n                className=\"form-select form-select-sm\"\n                value={selectedShopId}\n                onChange={(e) => setSelectedShopId(e.target.value)}\n                style={{ minWidth: \"180px\" }}\n              >\n                <option value=\"all\">All Shops</option>\n                {shops.map((shop) => (\n                  <option key={shop.id} value={shop.id}>\n                    {shop.name} ({shop.type})\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <label htmlFor=\"statusSelect\" className=\"form-label me-2 mb-0\">Status:</label>\n              <select \n                id=\"statusSelect\"\n                className=\"form-select form-select-sm\"\n                value={selectedStatus}\n                onChange={(e) => setSelectedStatus(e.target.value)}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"processing\">Processing</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"cancelled\">Cancelled</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <div>\n                <h5 className=\"fw-bold mb-0\">Order Management</h5>\n                {(selectedShopId !== \"all\" || selectedStatus !== \"all\") && (\n                  <small className=\"text-muted\">\n                    {selectedShopId !== \"all\" && `Shop: ${shops.find(s => s.id.toString() === selectedShopId)?.name}`}\n                    {selectedShopId !== \"all\" && selectedStatus !== \"all\" && \" | \"}\n                    {selectedStatus !== \"all\" && `Status: ${selectedStatus}`}\n                  </small>\n                )}\n              </div>\n              <div className=\"text-muted\">\n                {filteredOrders.length} order{filteredOrders.length !== 1 ? 's' : ''}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Order ID</th>\n                      <th>Customer</th>\n                      <th>Shop</th>\n                      <th>Items</th>\n                      <th>Total</th>\n                      <th>Status</th>\n                      <th>Date</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredOrders.length > 0 ? filteredOrders.map((order) => (\n                      <tr key={order.id}>\n                        <td><strong>#{order.id}</strong></td>\n                        <td>{order.customerName}</td>\n                        <td>\n                          <span className=\"badge bg-secondary\">{order.shopName}</span>\n                        </td>\n                        <td>{order.itemCount || 1}</td>\n                        <td><strong>${order.total}</strong></td>\n                        <td>\n                          <span className={`badge ${\n                            order.status === 'completed' ? 'bg-success' :\n                            order.status === 'pending' ? 'bg-warning' :\n                            order.status === 'processing' ? 'bg-info' :\n                            'bg-danger'\n                          }`}>\n                            {order.status}\n                          </span>\n                        </td>\n                        <td>{new Date(order.createdAt).toLocaleDateString()}</td>\n                        <td>\n                          <Button size=\"sm\" variant=\"outline\" className=\"me-2\">\n                            <i className=\"fas fa-eye\"></i>\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                        </td>\n                      </tr>\n                    )) : (\n                      <tr>\n                        <td colSpan={8} className=\"text-center text-muted py-4\">\n                          {selectedShopId !== \"all\" || selectedStatus !== \"all\" ? \"No orders match the selected filters\" : \"No orders found\"}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6786},"client/src/pages/admin/Reports.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport StatsCard from \"@/components/ui/stats-card\";\n\nexport default function Reports() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: shops = [] } = useQuery({\n    queryKey: [\"/api/shops\"],\n  });\n\n  const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total || 0), 0);\n  const completedOrders = orders.filter(order => order.status === 'completed').length;\n  const pendingOrders = orders.filter(order => order.status === 'pending').length;\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <h2 className=\"fw-bold\">Reports & Analytics</h2>\n          <div>\n            <select className=\"form-select form-select-sm\">\n              <option>Last 30 days</option>\n              <option>Last 7 days</option>\n              <option>Today</option>\n              <option>Custom range</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Revenue\"\n              value={`$${totalRevenue.toFixed(2)}`}\n              icon=\"fas fa-dollar-sign\"\n              variant=\"success\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Completed Orders\"\n              value={completedOrders}\n              icon=\"fas fa-check-circle\"\n              variant=\"default\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Pending Orders\"\n              value={pendingOrders}\n              icon=\"fas fa-clock\"\n              variant=\"warning\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Active Shops\"\n              value={shops.filter(shop => shop.isActive).length}\n              icon=\"fas fa-store\"\n              variant=\"default\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          {/* Sales by Shop Type */}\n          <div className=\"col-lg-6 mb-4\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Sales by Shop Type</h5>\n              </CardHeader>\n              <CardContent>\n                <div className=\"py-4\">\n                  <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"fas fa-cheese text-info me-3\"></i>\n                      <span>Dairy Shops</span>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                      <span className=\"me-3\">$1,250.00</span>\n                      <span className=\"badge bg-info\">45%</span>\n                    </div>\n                  </div>\n                  <div className=\"progress mb-3\" style={{ height: \"8px\" }}>\n                    <div className=\"progress-bar bg-info\" style={{ width: \"45%\" }}></div>\n                  </div>\n\n                  <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"fas fa-shopping-basket text-success me-3\"></i>\n                      <span>Grocery Stores</span>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                      <span className=\"me-3\">$950.00</span>\n                      <span className=\"badge bg-success\">35%</span>\n                    </div>\n                  </div>\n                  <div className=\"progress mb-3\" style={{ height: \"8px\" }}>\n                    <div className=\"progress-bar bg-success\" style={{ width: \"35%\" }}></div>\n                  </div>\n\n                  <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"fas fa-drumstick-bite text-danger me-3\"></i>\n                      <span>Meat Markets</span>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                      <span className=\"me-3\">$540.00</span>\n                      <span className=\"badge bg-danger\">20%</span>\n                    </div>\n                  </div>\n                  <div className=\"progress\" style={{ height: \"8px\" }}>\n                    <div className=\"progress-bar bg-danger\" style={{ width: \"20%\" }}></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Top Performing Shops */}\n          <div className=\"col-lg-6 mb-4\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Top Performing Shops</h5>\n              </CardHeader>\n              <CardContent>\n                <div className=\"py-2\">\n                  {shops.slice(0, 5).map((shop, index) => (\n                    <div key={shop.id} className=\"d-flex align-items-center justify-content-between py-2 border-bottom\">\n                      <div className=\"d-flex align-items-center\">\n                        <span className=\"badge bg-primary me-3\">{index + 1}</span>\n                        <div>\n                          <div className=\"fw-semibold\">{shop.name}</div>\n                          <small className=\"text-muted\">{shop.type}</small>\n                        </div>\n                      </div>\n                      <div className=\"text-end\">\n                        <div className=\"fw-bold text-success\">$850.00</div>\n                        <small className=\"text-muted\">25 orders</small>\n                      </div>\n                    </div>\n                  ))}\n                  {shops.length === 0 && (\n                    <div className=\"text-center text-muted py-4\">\n                      <i className=\"fas fa-chart-bar fs-1 mb-3\"></i>\n                      <p>No shop data available</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Recent Activity Summary */}\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">Activity Summary</h5>\n          </CardHeader>\n          <CardContent>\n            <div className=\"table-responsive\">\n              <table className=\"table table-sm\">\n                <thead>\n                  <tr>\n                    <th>Metric</th>\n                    <th>Today</th>\n                    <th>Yesterday</th>\n                    <th>This Week</th>\n                    <th>Change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Orders</td>\n                    <td>15</td>\n                    <td>12</td>\n                    <td>89</td>\n                    <td><span className=\"text-success\">+25%</span></td>\n                  </tr>\n                  <tr>\n                    <td>Revenue</td>\n                    <td>$340.50</td>\n                    <td>$285.00</td>\n                    <td>$2,150.00</td>\n                    <td><span className=\"text-success\">+19%</span></td>\n                  </tr>\n                  <tr>\n                    <td>New Users</td>\n                    <td>3</td>\n                    <td>1</td>\n                    <td>8</td>\n                    <td><span className=\"text-success\">+200%</span></td>\n                  </tr>\n                  <tr>\n                    <td>Products Added</td>\n                    <td>5</td>\n                    <td>7</td>\n                    <td>28</td>\n                    <td><span className=\"text-danger\">-29%</span></td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8335},"client/src/pages/admin/StockManagement.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function StockManagement() {\n  const [selectedShopId, setSelectedShopId] = useState(\"all\");\n\n  // Fetch all shops for the dropdown\n  const { data: shops = [] } = useQuery({\n    queryKey: [\"/api/shops\"],\n  });\n\n  // Build query URLs based on selected shop\n  const lowStockUrl = selectedShopId === \"all\" \n    ? \"/api/stock/low\" \n    : `/api/stock/low?shopId=${selectedShopId}`;\n    \n  const outOfStockUrl = selectedShopId === \"all\"\n    ? \"/api/stock/out\"\n    : `/api/stock/out?shopId=${selectedShopId}`;\n    \n  const productsUrl = selectedShopId === \"all\"\n    ? \"/api/products\"\n    : `/api/products/shop/${selectedShopId}`;\n\n  const { data: lowStockProducts = [], isLoading: lowStockLoading } = useQuery({\n    queryKey: [lowStockUrl],\n  });\n\n  const { data: outOfStockProducts = [], isLoading: outOfStockLoading } = useQuery({\n    queryKey: [outOfStockUrl],\n  });\n\n  const { data: allProducts = [], isLoading: allProductsLoading } = useQuery({\n    queryKey: [productsUrl],\n  });\n\n  const healthyStockCount = allProducts.filter(p => p.stock > p.minStock).length;\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">\n              Stock Management\n              {selectedShopId !== \"all\" && shops.length > 0 && (\n                <span className=\"text-muted fs-6 ms-2\">\n                  - {shops.find(s => s.id.toString() === selectedShopId)?.name}\n                </span>\n              )}\n            </h2>\n          </div>\n          <div className=\"d-flex align-items-center gap-3\">\n            <div className=\"d-flex align-items-center\">\n              <label htmlFor=\"shopSelect\" className=\"form-label me-2 mb-0\">Shop:</label>\n              <select \n                id=\"shopSelect\"\n                className=\"form-select form-select-sm\"\n                value={selectedShopId}\n                onChange={(e) => setSelectedShopId(e.target.value)}\n                style={{ minWidth: \"180px\" }}\n              >\n                <option value=\"all\">All Shops</option>\n                {shops.map((shop) => (\n                  <option key={shop.id} value={shop.id}>\n                    {shop.name} ({shop.type})\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <Button variant=\"outline\" className=\"me-2 btn-warning\">\n                <i className=\"fas fa-exclamation-triangle me-2\"></i>\n                Low Stock Alert ({lowStockProducts.length})\n              </Button>\n              <Button variant=\"outline\" className=\"btn-danger\">\n                <i className=\"fas fa-times-circle me-2\"></i>\n                Out of Stock ({outOfStockProducts.length})\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-4\">\n            <Card className=\"border-warning stock-low\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-warning\">\n                  <i className=\"fas fa-exclamation-triangle me-2\"></i>\n                  Low Stock Items\n                </h6>\n                <h3 className=\"text-warning\">{lowStockProducts.length}</h3>\n                <p className=\"mb-0 text-muted\">Items below minimum threshold</p>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"col-md-4\">\n            <Card className=\"border-danger stock-out\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-danger\">\n                  <i className=\"fas fa-times-circle me-2\"></i>\n                  Out of Stock\n                </h6>\n                <h3 className=\"text-danger\">{outOfStockProducts.length}</h3>\n                <p className=\"mb-0 text-muted\">Items completely out of stock</p>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"col-md-4\">\n            <Card className=\"border-success\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-success\">\n                  <i className=\"fas fa-check-circle me-2\"></i>\n                  Healthy Stock\n                </h6>\n                <h3 className=\"text-success\">{healthyStockCount}</h3>\n                <p className=\"mb-0 text-muted\">Items with adequate stock</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"row align-items-center\">\n              <div className=\"col\">\n                <h5 className=\"fw-bold mb-0\">Stock Levels</h5>\n                {selectedShopId !== \"all\" && (\n                  <small className=\"text-muted\">\n                    Showing products for {shops.find(s => s.id.toString() === selectedShopId)?.name}\n                  </small>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {allProductsLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Product</th>\n                      <th>SKU</th>\n                      <th>Current Stock</th>\n                      <th>Min. Required</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {allProducts.map((product) => {\n                      const isOutOfStock = product.stock === 0;\n                      const isLowStock = product.stock <= product.minStock && product.stock > 0;\n                      \n                      return (\n                        <tr \n                          key={product.id} \n                          className={\n                            isOutOfStock ? \"stock-out\" : \n                            isLowStock ? \"stock-low\" : \"\"\n                          }\n                        >\n                          <td>\n                            <div className=\"d-flex align-items-center\">\n                              {product.imageUrl ? (\n                                <img \n                                  src={product.imageUrl} \n                                  alt={product.name}\n                                  className=\"me-2 rounded\" \n                                  style={{ width: \"40px\", height: \"40px\", objectFit: \"cover\" }}\n                                />\n                              ) : (\n                                <div \n                                  className=\"me-2 rounded bg-light d-flex align-items-center justify-content-center\"\n                                  style={{ width: \"40px\", height: \"40px\" }}\n                                >\n                                  <i className=\"fas fa-box text-muted\"></i>\n                                </div>\n                              )}\n                              <div>\n                                <strong>{product.name}</strong>\n                                <br />\n                                <small className=\"text-muted\">{product.brand}</small>\n                              </div>\n                            </div>\n                          </td>\n                          <td><small className=\"text-muted\">{product.sku}</small></td>\n                          <td>\n                            <span className={\n                              isOutOfStock ? \"text-danger fw-bold\" :\n                              isLowStock ? \"text-warning fw-bold\" :\n                              \"text-success fw-bold\"\n                            }>\n                              {product.stock}\n                            </span>\n                          </td>\n                          <td>{product.minStock}</td>\n                          <td>\n                            <span className={`badge ${\n                              isOutOfStock ? \"bg-danger\" :\n                              isLowStock ? \"bg-warning\" :\n                              \"bg-success\"\n                            }`}>\n                              {isOutOfStock ? \"Out of Stock\" :\n                               isLowStock ? \"Low Stock\" :\n                               \"In Stock\"}\n                            </span>\n                          </td>\n                          <td>\n                            {(isOutOfStock || isLowStock) ? (\n                              <Button size=\"sm\" variant=\"outline\" className=\"btn-action\">\n                                <i className=\"fas fa-plus me-1\"></i>Restock\n                              </Button>\n                            ) : (\n                              <Button size=\"sm\" variant=\"outline\" className=\"btn-action\">\n                                <i className=\"fas fa-edit me-1\"></i>Edit\n                              </Button>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                    {allProducts.length === 0 && (\n                      <tr>\n                        <td colSpan={6} className=\"text-center text-muted py-4\">\n                          No products found\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10126},"client/src/pages/admin/StockManagement.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function StockManagement() {\n  const { data: lowStockProducts = [], isLoading: lowStockLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/stock/low\"],\n  });\n\n  const { data: outOfStockProducts = [], isLoading: outOfStockLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/stock/out\"],\n  });\n\n  const { data: allProducts = [], isLoading: allProductsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const healthyStockCount = allProducts.filter(p => p.stock > p.minStock).length;\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <h2 className=\"fw-bold\">Stock Management</h2>\n          <div>\n            <Button variant=\"outline\" className=\"me-2 btn-warning\">\n              <i className=\"fas fa-exclamation-triangle me-2\"></i>\n              Low Stock Alert ({lowStockProducts.length})\n            </Button>\n            <Button variant=\"outline\" className=\"btn-danger\">\n              <i className=\"fas fa-times-circle me-2\"></i>\n              Out of Stock ({outOfStockProducts.length})\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-4\">\n            <Card className=\"border-warning stock-low\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-warning\">\n                  <i className=\"fas fa-exclamation-triangle me-2\"></i>\n                  Low Stock Items\n                </h6>\n                <h3 className=\"text-warning\">{lowStockProducts.length}</h3>\n                <p className=\"mb-0 text-muted\">Items below minimum threshold</p>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"col-md-4\">\n            <Card className=\"border-danger stock-out\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-danger\">\n                  <i className=\"fas fa-times-circle me-2\"></i>\n                  Out of Stock\n                </h6>\n                <h3 className=\"text-danger\">{outOfStockProducts.length}</h3>\n                <p className=\"mb-0 text-muted\">Items completely out of stock</p>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"col-md-4\">\n            <Card className=\"border-success\">\n              <CardContent className=\"p-4\">\n                <h6 className=\"fw-bold text-success\">\n                  <i className=\"fas fa-check-circle me-2\"></i>\n                  Healthy Stock\n                </h6>\n                <h3 className=\"text-success\">{healthyStockCount}</h3>\n                <p className=\"mb-0 text-muted\">Items with adequate stock</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"row align-items-center\">\n              <div className=\"col\">\n                <h5 className=\"fw-bold mb-0\">Stock Levels</h5>\n              </div>\n              <div className=\"col-auto\">\n                <select className=\"form-select form-select-sm\">\n                  <option>All Shops</option>\n                  <option>Dairy Shops</option>\n                  <option>Meat Markets</option>\n                  <option>Grocery Stores</option>\n                </select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {allProductsLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Product</th>\n                      <th>SKU</th>\n                      <th>Current Stock</th>\n                      <th>Min. Required</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {allProducts.map((product) => {\n                      const isOutOfStock = product.stock === 0;\n                      const isLowStock = product.stock <= product.minStock && product.stock > 0;\n                      \n                      return (\n                        <tr \n                          key={product.id} \n                          className={\n                            isOutOfStock ? \"stock-out\" : \n                            isLowStock ? \"stock-low\" : \"\"\n                          }\n                        >\n                          <td>\n                            <div className=\"d-flex align-items-center\">\n                              {product.imageUrl ? (\n                                <img \n                                  src={product.imageUrl} \n                                  alt={product.name}\n                                  className=\"me-2 rounded\" \n                                  style={{ width: \"40px\", height: \"40px\", objectFit: \"cover\" }}\n                                />\n                              ) : (\n                                <div \n                                  className=\"me-2 rounded bg-light d-flex align-items-center justify-content-center\"\n                                  style={{ width: \"40px\", height: \"40px\" }}\n                                >\n                                  <i className=\"fas fa-box text-muted\"></i>\n                                </div>\n                              )}\n                              <div>\n                                <strong>{product.name}</strong>\n                                <br />\n                                <small className=\"text-muted\">{product.brand}</small>\n                              </div>\n                            </div>\n                          </td>\n                          <td><small className=\"text-muted\">{product.sku}</small></td>\n                          <td>\n                            <span className={\n                              isOutOfStock ? \"text-danger fw-bold\" :\n                              isLowStock ? \"text-warning fw-bold\" :\n                              \"text-success fw-bold\"\n                            }>\n                              {product.stock}\n                            </span>\n                          </td>\n                          <td>{product.minStock}</td>\n                          <td>\n                            <span className={`badge ${\n                              isOutOfStock ? \"bg-danger\" :\n                              isLowStock ? \"bg-warning\" :\n                              \"bg-success\"\n                            }`}>\n                              {isOutOfStock ? \"Out of Stock\" :\n                               isLowStock ? \"Low Stock\" :\n                               \"In Stock\"}\n                            </span>\n                          </td>\n                          <td>\n                            {(isOutOfStock || isLowStock) ? (\n                              <Button size=\"sm\" variant=\"outline\" className=\"btn-action\">\n                                <i className=\"fas fa-plus me-1\"></i>Restock\n                              </Button>\n                            ) : (\n                              <Button size=\"sm\" variant=\"outline\" className=\"btn-action\">\n                                <i className=\"fas fa-edit me-1\"></i>Edit\n                              </Button>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                    {allProducts.length === 0 && (\n                      <tr>\n                        <td colSpan={6} className=\"text-center text-muted py-4\">\n                          No products found\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8576},"client/src/pages/admin/UserManagement.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport AdminSidebar from \"@/components/Layout/AdminSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"shopkeeper\",\n    phone: \"\",\n  });\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (userData) => apiRequest(\"POST\", \"/api/users\", userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"Success\", description: \"User created successfully!\" });\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create user\", variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"shopkeeper\",\n      phone: \"\",\n    });\n    setShowAddForm(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createUserMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <AdminSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <h2 className=\"fw-bold\">User Management</h2>\n          <Button onClick={() => setShowAddForm(true)} className=\"btn-primary\">\n            <i className=\"fas fa-plus me-2\"></i>Add New User\n          </Button>\n        </div>\n\n        {showAddForm && (\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <h5 className=\"fw-bold mb-0\">Add New User</h5>\n                <Button variant=\"outline\" size=\"sm\" onClick={resetForm}>\n                  <i className=\"fas fa-times\"></i>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit}>\n                <div className=\"row\">\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"name\">Full Name *</Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      placeholder=\"Enter full name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter email address\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"password\">Password *</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"Enter password\"\n                      value={formData.password}\n                      onChange={(e) => handleInputChange('password', e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"col-md-6 mb-3\">\n                    <Label htmlFor=\"role\">Role *</Label>\n                    <select\n                      id=\"role\"\n                      className=\"form-select\"\n                      value={formData.role}\n                      onChange={(e) => handleInputChange('role', e.target.value)}\n                      required\n                    >\n                      <option value=\"shopkeeper\">Shopkeeper</option>\n                      <option value=\"admin\">Admin</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"mb-4\">\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    placeholder=\"Phone number\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                  />\n                </div>\n\n                <div className=\"d-flex gap-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending}\n                    className=\"btn-primary\"\n                  >\n                    Create User\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">All Users ({users.length})</h5>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Name</th>\n                      <th>Email</th>\n                      <th>Role</th>\n                      <th>Phone</th>\n                      <th>Status</th>\n                      <th>Created</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {users.map((user) => (\n                      <tr key={user.id}>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <div className=\"bg-primary rounded-circle d-flex align-items-center justify-content-center me-3\" \n                                 style={{ width: \"32px\", height: \"32px\" }}>\n                              <i className=\"fas fa-user text-white small\"></i>\n                            </div>\n                            <strong>{user.name}</strong>\n                          </div>\n                        </td>\n                        <td>{user.email}</td>\n                        <td>\n                          <span className={`badge ${user.role === 'admin' ? 'bg-danger' : 'bg-success'}`}>\n                            {user.role}\n                          </span>\n                        </td>\n                        <td>{user.phone || '-'}</td>\n                        <td>\n                          <span className={`badge ${user.isActive ? 'bg-success' : 'bg-secondary'}`}>\n                            {user.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td>{new Date(user.createdAt).toLocaleDateString()}</td>\n                        <td>\n                          <Button size=\"sm\" variant=\"outline\" className=\"me-2\">\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-danger\">\n                            <i className=\"fas fa-trash\"></i>\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                    {users.length === 0 && (\n                      <tr>\n                        <td colSpan={7} className=\"text-center text-muted py-4\">\n                          No users found\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8808},"client/src/pages/shopkeeper/AddProduct.jsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AddProduct() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    sku: \"\",\n    description: \"\",\n    price: \"\",\n    stock: \"\",\n    minStock: \"5\",\n    unit: \"pieces\",\n    brand: \"\",\n    categoryId: \"\",\n    shopId: 1, // This should be dynamically set based on the shopkeeper's shop\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData) => {\n      return apiRequest(\"POST\", \"/api/products\", {\n        ...productData,\n        price: parseFloat(productData.price).toString(),\n        stock: parseInt(productData.stock),\n        minStock: parseInt(productData.minStock),\n        categoryId: parseInt(productData.categoryId) || null,\n        shopId: parseInt(productData.shopId),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product added successfully!\",\n      });\n      setLocation(\"/shopkeeper/products\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createProductMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Add New Product</h2>\n            <p className=\"text-muted mb-0\">Add a new product to your shop inventory</p>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation(\"/shopkeeper/products\")}\n          >\n            <i className=\"fas fa-arrow-left me-2\"></i>Back to Products\n          </Button>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-lg-8 mx-auto\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Product Information</h5>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit}>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"name\">Product Name *</Label>\n                      <Input\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"Enter product name\"\n                        value={formData.name}\n                        onChange={(e) => handleInputChange('name', e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"sku\">SKU *</Label>\n                      <Input\n                        id=\"sku\"\n                        type=\"text\"\n                        placeholder=\"Product SKU\"\n                        value={formData.sku}\n                        onChange={(e) => handleInputChange('sku', e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"mb-3\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"Product description\"\n                      value={formData.description}\n                      onChange={(e) => handleInputChange('description', e.target.value)}\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-md-4 mb-3\">\n                      <Label htmlFor=\"price\">Price * ($)</Label>\n                      <Input\n                        id=\"price\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        value={formData.price}\n                        onChange={(e) => handleInputChange('price', e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div className=\"col-md-4 mb-3\">\n                      <Label htmlFor=\"stock\">Stock Quantity *</Label>\n                      <Input\n                        id=\"stock\"\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={formData.stock}\n                        onChange={(e) => handleInputChange('stock', e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div className=\"col-md-4 mb-3\">\n                      <Label htmlFor=\"minStock\">Minimum Stock</Label>\n                      <Input\n                        id=\"minStock\"\n                        type=\"number\"\n                        placeholder=\"5\"\n                        value={formData.minStock}\n                        onChange={(e) => handleInputChange('minStock', e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"unit\">Unit</Label>\n                      <select \n                        id=\"unit\"\n                        className=\"form-select\"\n                        value={formData.unit}\n                        onChange={(e) => handleInputChange('unit', e.target.value)}\n                      >\n                        <option value=\"pieces\">Pieces</option>\n                        <option value=\"kg\">Kilograms</option>\n                        <option value=\"liter\">Liters</option>\n                        <option value=\"pack\">Packs</option>\n                        <option value=\"dozen\">Dozen</option>\n                      </select>\n                    </div>\n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"brand\">Brand</Label>\n                      <Input\n                        id=\"brand\"\n                        type=\"text\"\n                        placeholder=\"Brand name\"\n                        value={formData.brand}\n                        onChange={(e) => handleInputChange('brand', e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <Label htmlFor=\"categoryId\">Category</Label>\n                    <select\n                      id=\"categoryId\"\n                      className=\"form-select\"\n                      value={formData.categoryId}\n                      onChange={(e) => handleInputChange('categoryId', e.target.value)}\n                    >\n                      <option value=\"\">Select a category</option>\n                      {categories.map((category) => (\n                        <option key={category.id} value={category.id}>\n                          {category.name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div className=\"d-flex gap-2\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createProductMutation.isPending}\n                      className=\"btn-primary\"\n                    >\n                      {createProductMutation.isPending ? (\n                        <>\n                          <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n                          Adding...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-plus me-2\"></i>Add Product\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setLocation(\"/shopkeeper/products\")}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9150},"client/src/pages/shopkeeper/Orders.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ShopkeeperOrders() {\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">My Orders</h2>\n            <p className=\"text-muted mb-0\">Track and manage your shop orders</p>\n          </div>\n          <div>\n            <select className=\"form-select form-select-sm\">\n              <option>All Orders</option>\n              <option>Pending</option>\n              <option>Processing</option>\n              <option>Completed</option>\n            </select>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">Order History</h5>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : orders.length > 0 ? (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Order ID</th>\n                      <th>Customer</th>\n                      <th>Items</th>\n                      <th>Total</th>\n                      <th>Status</th>\n                      <th>Date</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orders.map((order) => (\n                      <tr key={order.id}>\n                        <td><strong>#{order.id}</strong></td>\n                        <td>\n                          <div>\n                            <div className=\"fw-semibold\">{order.customerName}</div>\n                            {order.customerPhone && (\n                              <small className=\"text-muted\">{order.customerPhone}</small>\n                            )}\n                          </div>\n                        </td>\n                        <td>{order.itemCount || 1} items</td>\n                        <td><strong>${order.total}</strong></td>\n                        <td>\n                          <span className={`badge ${\n                            order.status === 'completed' ? 'bg-success' :\n                            order.status === 'pending' ? 'bg-warning' :\n                            order.status === 'processing' ? 'bg-info' :\n                            'bg-danger'\n                          }`}>\n                            {order.status}\n                          </span>\n                        </td>\n                        <td>\n                          <div>\n                            <div>{new Date(order.createdAt).toLocaleDateString()}</div>\n                            <small className=\"text-muted\">\n                              {new Date(order.createdAt).toLocaleTimeString()}\n                            </small>\n                          </div>\n                        </td>\n                        <td>\n                          <div className=\"d-flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <i className=\"fas fa-eye\"></i>\n                            </Button>\n                            {order.status === 'pending' && (\n                              <Button size=\"sm\" className=\"btn-success\">\n                                <i className=\"fas fa-check\"></i>\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-5\">\n                <i className=\"fas fa-shopping-cart fs-1 mb-3\"></i>\n                <p>No orders received yet</p>\n                <small>Orders from customers will appear here</small>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4618},"client/src/pages/shopkeeper/Products.jsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Products() {\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: (id) => apiRequest(\"DELETE\", `/api/products/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Product deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete product\", variant: \"destructive\" });\n    },\n  });\n\n  const handleDelete = (product) => {\n    if (window.confirm(`Are you sure you want to delete \"${product.name}\"?`)) {\n      deleteProductMutation.mutate(product.id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">My Products</h2>\n            <p className=\"text-muted mb-0\">Manage your shop inventory</p>\n          </div>\n          <Link href=\"/shopkeeper/add-product\" className=\"btn btn-primary\">\n            <i className=\"fas fa-plus me-2\"></i>Add Product\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <h5 className=\"fw-bold mb-0\">Product Inventory ({products.length})</h5>\n              <div>\n                <select className=\"form-select form-select-sm\">\n                  <option>All Categories</option>\n                  <option>Dairy</option>\n                  <option>Beverages</option>\n                  <option>Snacks</option>\n                </select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : products.length > 0 ? (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Product</th>\n                      <th>SKU</th>\n                      <th>Price</th>\n                      <th>Stock</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {products.map((product) => {\n                      const isOutOfStock = product.stock === 0;\n                      const isLowStock = product.stock <= (product.minStock || 5) && product.stock > 0;\n                      \n                      return (\n                        <tr key={product.id}>\n                          <td>\n                            <div className=\"d-flex align-items-center\">\n                              {product.imageUrl ? (\n                                <img \n                                  src={product.imageUrl} \n                                  alt={product.name}\n                                  className=\"me-3 rounded\" \n                                  style={{ width: \"48px\", height: \"48px\", objectFit: \"cover\" }}\n                                />\n                              ) : (\n                                <div \n                                  className=\"me-3 rounded bg-light d-flex align-items-center justify-content-center\"\n                                  style={{ width: \"48px\", height: \"48px\" }}\n                                >\n                                  <i className=\"fas fa-box text-muted\"></i>\n                                </div>\n                              )}\n                              <div>\n                                <div className=\"fw-semibold\">{product.name}</div>\n                                {product.brand && (\n                                  <small className=\"text-muted\">{product.brand}</small>\n                                )}\n                              </div>\n                            </div>\n                          </td>\n                          <td>\n                            <code className=\"small\">{product.sku}</code>\n                          </td>\n                          <td>\n                            <span className=\"fw-bold\">${product.price}</span>\n                            <small className=\"text-muted\">/{product.unit}</small>\n                          </td>\n                          <td>\n                            <span className={`fw-bold ${\n                              isOutOfStock ? 'text-danger' :\n                              isLowStock ? 'text-warning' :\n                              'text-success'\n                            }`}>\n                              {product.stock}\n                            </span>\n                            <small className=\"text-muted\"> {product.unit}</small>\n                          </td>\n                          <td>\n                            <span className={`badge ${\n                              isOutOfStock ? 'bg-danger' :\n                              isLowStock ? 'bg-warning' :\n                              product.isActive ? 'bg-success' : 'bg-secondary'\n                            }`}>\n                              {isOutOfStock ? 'Out of Stock' :\n                               isLowStock ? 'Low Stock' :\n                               product.isActive ? 'Active' : 'Inactive'}\n                            </span>\n                          </td>\n                          <td>\n                            <div className=\"d-flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\" className=\"btn-action\">\n                                <i className=\"fas fa-edit\"></i>\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                className=\"text-danger\"\n                                onClick={() => handleDelete(product)}\n                              >\n                                <i className=\"fas fa-trash\"></i>\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-5\">\n                <i className=\"fas fa-box fs-1 mb-3\"></i>\n                <p className=\"mb-3\">No products found in your inventory</p>\n                <Link href=\"/shopkeeper/add-product\" className=\"btn btn-primary\">\n                  <i className=\"fas fa-plus me-2\"></i>Add Your First Product\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7546},"client/src/pages/shopkeeper/Reports.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport StatsCard from \"@/components/ui/stats-card\";\n\nexport default function ShopkeeperReports() {\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total || 0), 0);\n  const completedOrders = orders.filter(order => order.status === 'completed').length;\n  const pendingOrders = orders.filter(order => order.status === 'pending').length;\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Sales Reports</h2>\n            <p className=\"text-muted mb-0\">Track your shop performance</p>\n          </div>\n          <div>\n            <select className=\"form-select form-select-sm\">\n              <option>Last 30 days</option>\n              <option>Last 7 days</option>\n              <option>Today</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Sales Overview */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Revenue\"\n              value={`$${totalRevenue.toFixed(2)}`}\n              icon=\"fas fa-dollar-sign\"\n              variant=\"success\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Completed Orders\"\n              value={completedOrders}\n              icon=\"fas fa-check-circle\"\n              variant=\"default\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Pending Orders\"\n              value={pendingOrders}\n              icon=\"fas fa-clock\"\n              variant=\"warning\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Products\"\n              value={products.length}\n              icon=\"fas fa-box\"\n              variant=\"default\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          {/* Best Selling Products */}\n          <div className=\"col-lg-8 mb-4\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Best Selling Products</h5>\n              </CardHeader>\n              <CardContent>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-sm\">\n                    <thead>\n                      <tr>\n                        <th>Product</th>\n                        <th>Units Sold</th>\n                        <th>Revenue</th>\n                        <th>Trend</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {products.slice(0, 5).map((product, index) => (\n                        <tr key={product.id}>\n                          <td>\n                            <div className=\"d-flex align-items-center\">\n                              <span className=\"badge bg-primary me-2\">{index + 1}</span>\n                              <div>\n                                <div className=\"fw-semibold\">{product.name}</div>\n                                <small className=\"text-muted\">{product.brand}</small>\n                              </div>\n                            </div>\n                          </td>\n                          <td>\n                            <span className=\"fw-bold\">25</span> units\n                          </td>\n                          <td>\n                            <span className=\"fw-bold text-success\">$125.00</span>\n                          </td>\n                          <td>\n                            <span className=\"text-success\">\n                              <i className=\"fas fa-arrow-up me-1\"></i>+12%\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                      {products.length === 0 && (\n                        <tr>\n                          <td colSpan={4} className=\"text-center text-muted py-4\">\n                            No products data available\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"col-lg-4 mb-4\">\n            <Card className=\"mb-3\">\n              <CardHeader>\n                <h6 className=\"fw-bold mb-0\">Daily Performance</h6>\n              </CardHeader>\n              <CardContent>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Today's Sales</span>\n                  <strong className=\"text-success\">$85.50</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Orders Today</span>\n                  <strong>8</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Avg. Order Value</span>\n                  <strong>$10.69</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <span>Customer Return Rate</span>\n                  <strong className=\"text-success\">78%</strong>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <h6 className=\"fw-bold mb-0\">Inventory Status</h6>\n              </CardHeader>\n              <CardContent>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Total Products</span>\n                  <strong>{products.length}</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Low Stock Items</span>\n                  <strong className=\"text-warning\">3</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                  <span>Out of Stock</span>\n                  <strong className=\"text-danger\">1</strong>\n                </div>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <span>Inventory Value</span>\n                  <strong className=\"text-success\">$2,340</strong>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Monthly Overview */}\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">Monthly Overview</h5>\n          </CardHeader>\n          <CardContent>\n            <div className=\"table-responsive\">\n              <table className=\"table table-sm\">\n                <thead>\n                  <tr>\n                    <th>Metric</th>\n                    <th>This Month</th>\n                    <th>Last Month</th>\n                    <th>Change</th>\n                    <th>Goal</th>\n                    <th>Progress</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Revenue</td>\n                    <td>$1,250.00</td>\n                    <td>$1,100.00</td>\n                    <td><span className=\"text-success\">+13.6%</span></td>\n                    <td>$1,500.00</td>\n                    <td>\n                      <div className=\"progress\" style={{ height: \"6px\" }}>\n                        <div className=\"progress-bar bg-success\" style={{ width: \"83%\" }}></div>\n                      </div>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Orders</td>\n                    <td>89</td>\n                    <td>76</td>\n                    <td><span className=\"text-success\">+17.1%</span></td>\n                    <td>100</td>\n                    <td>\n                      <div className=\"progress\" style={{ height: \"6px\" }}>\n                        <div className=\"progress-bar bg-info\" style={{ width: \"89%\" }}></div>\n                      </div>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>New Products</td>\n                    <td>5</td>\n                    <td>3</td>\n                    <td><span className=\"text-success\">+66.7%</span></td>\n                    <td>8</td>\n                    <td>\n                      <div className=\"progress\" style={{ height: \"6px\" }}>\n                        <div className=\"progress-bar bg-warning\" style={{ width: \"62%\" }}></div>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9301},"client/src/pages/shopkeeper/ShopkeeperDashboard.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport StatsCard from \"@/components/ui/stats-card\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function ShopkeeperDashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentOrders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: lowStockProducts = [] } = useQuery({\n    queryKey: [\"/api/stock/low\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen d-flex\">\n        <ShopkeeperSidebar />\n        <div className=\"main-content\">\n          <div className=\"d-flex justify-content-center align-items-center\" style={{ height: \"50vh\" }}>\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Dashboard</h2>\n            <p className=\"text-muted mb-0\">Fresh Dairy Shop - Daily Overview</p>\n          </div>\n          <div>\n            <span className=\"badge bg-success\">Online</span>\n            <span className=\"text-muted ms-2\">{new Date().toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {/* Shopkeeper Stats */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Today's Profit\"\n              value={`$${stats?.dailyProfit || \"0.00\"}`}\n              icon=\"fas fa-dollar-sign\"\n              variant=\"default\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Orders Today\"\n              value={stats?.ordersToday || 0}\n              icon=\"fas fa-shopping-cart\"\n              variant=\"success\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Total Products\"\n              value={stats?.totalProducts || 0}\n              icon=\"fas fa-box\"\n              variant=\"warning\"\n            />\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <StatsCard\n              title=\"Low Stock Items\"\n              value={stats?.lowStockItems || 0}\n              icon=\"fas fa-exclamation-triangle\"\n              variant=\"danger\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          {/* Recent Orders */}\n          <div className=\"col-lg-8 mb-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <h5 className=\"fw-bold mb-0\">Recent Orders</h5>\n                  <Link href=\"/shopkeeper/orders\" className=\"btn btn-outline-primary btn-sm\">\n                    View All\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {recentOrders.length > 0 ? (\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                      <thead className=\"table-light\">\n                        <tr>\n                          <th>Order ID</th>\n                          <th>Customer</th>\n                          <th>Amount</th>\n                          <th>Status</th>\n                          <th>Action</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {recentOrders.slice(0, 5).map((order) => (\n                          <tr key={order.id}>\n                            <td><strong>#{order.id}</strong></td>\n                            <td>{order.customerName}</td>\n                            <td><strong>${order.total}</strong></td>\n                            <td>\n                              <span className={`badge ${\n                                order.status === 'completed' ? 'bg-success' :\n                                order.status === 'pending' ? 'bg-warning' :\n                                'bg-info'\n                              }`}>\n                                {order.status}\n                              </span>\n                            </td>\n                            <td>\n                              <Button size=\"sm\" variant=\"outline\">\n                                View Details\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted py-4\">\n                    <i className=\"fas fa-shopping-cart fs-1 mb-3\"></i>\n                    <p>No recent orders</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Stock Alerts & Quick Actions */}\n          <div className=\"col-lg-4\">\n            <div className=\"row\">\n              <div className=\"col-12 mb-4\">\n                <Card>\n                  <CardHeader>\n                    <h5 className=\"fw-bold mb-0\">Stock Alerts</h5>\n                  </CardHeader>\n                  <CardContent>\n                    {lowStockProducts.length > 0 ? (\n                      <div>\n                        {lowStockProducts.slice(0, 3).map((product) => (\n                          <div key={product.id} className=\"d-flex align-items-center justify-content-between mb-2\">\n                            <div>\n                              <small className=\"fw-bold\">{product.name}</small>\n                              <br />\n                              <small className=\"text-muted\">Stock: {product.stock}</small>\n                            </div>\n                            <span className=\"badge bg-warning\">Low</span>\n                          </div>\n                        ))}\n                        <Link href=\"/shopkeeper/stock\" className=\"btn btn-outline-warning btn-sm w-100\">\n                          View All Alerts\n                        </Link>\n                      </div>\n                    ) : (\n                      <div className=\"text-center text-muted py-3\">\n                        <i className=\"fas fa-check-circle text-success fs-2 mb-2\"></i>\n                        <p className=\"small mb-0\">All items in stock</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"col-12 mb-4\">\n                <Card>\n                  <CardHeader>\n                    <h5 className=\"fw-bold mb-0\">Quick Actions</h5>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"d-grid gap-2\">\n                      <Link href=\"/shopkeeper/add-product\" className=\"btn btn-outline-primary\">\n                        <i className=\"fas fa-plus me-2\"></i>Add Product\n                      </Link>\n                      <Link href=\"/shopkeeper/orders\" className=\"btn btn-outline-success\">\n                        <i className=\"fas fa-eye me-2\"></i>View Orders\n                      </Link>\n                      <Link href=\"/shopkeeper/reports\" className=\"btn btn-outline-info\">\n                        <i className=\"fas fa-chart-line me-2\"></i>Sales Report\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7958},"client/src/pages/shopkeeper/StockAlerts.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function StockAlerts() {\n  const { data: lowStockProducts = [], isLoading: lowStockLoading } = useQuery({\n    queryKey: [\"/api/stock/low\"],\n  });\n\n  const { data: outOfStockProducts = [], isLoading: outOfStockLoading } = useQuery({\n    queryKey: [\"/api/stock/out\"],\n  });\n\n  const isLoading = lowStockLoading || outOfStockLoading;\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Stock Alerts</h2>\n            <p className=\"text-muted mb-0\">Monitor your inventory levels</p>\n          </div>\n          <div className=\"d-flex gap-2\">\n            <span className=\"badge bg-danger fs-6\">\n              Out of Stock: {outOfStockProducts.length}\n            </span>\n            <span className=\"badge bg-warning fs-6\">\n              Low Stock: {lowStockProducts.length}\n            </span>\n          </div>\n        </div>\n\n        {/* Out of Stock Items */}\n        <Card className=\"mb-4\">\n          <CardHeader className=\"border-danger\">\n            <h5 className=\"fw-bold mb-0 text-danger\">\n              <i className=\"fas fa-times-circle me-2\"></i>\n              Out of Stock Items ({outOfStockProducts.length})\n            </h5>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : outOfStockProducts.length > 0 ? (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Product</th>\n                      <th>SKU</th>\n                      <th>Last Stock</th>\n                      <th>Min Required</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {outOfStockProducts.map((product) => (\n                      <tr key={product.id}>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            {product.imageUrl ? (\n                              <img \n                                src={product.imageUrl} \n                                alt={product.name}\n                                className=\"me-3 rounded\" \n                                style={{ width: \"40px\", height: \"40px\", objectFit: \"cover\" }}\n                              />\n                            ) : (\n                              <div \n                                className=\"me-3 rounded bg-light d-flex align-items-center justify-content-center\"\n                                style={{ width: \"40px\", height: \"40px\" }}\n                              >\n                                <i className=\"fas fa-box text-muted\"></i>\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"fw-semibold\">{product.name}</div>\n                              {product.brand && (\n                                <small className=\"text-muted\">{product.brand}</small>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                        <td><code className=\"small\">{product.sku}</code></td>\n                        <td>\n                          <span className=\"text-danger fw-bold\">0</span>\n                          <small className=\"text-muted\"> {product.unit}</small>\n                        </td>\n                        <td>{product.minStock || 5} {product.unit}</td>\n                        <td>\n                          <Button size=\"sm\" className=\"btn-danger\">\n                            <i className=\"fas fa-plus me-1\"></i>Restock Urgently\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-4\">\n                <i className=\"fas fa-check-circle text-success fs-1 mb-3\"></i>\n                <p>No items are out of stock!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Low Stock Items */}\n        <Card>\n          <CardHeader className=\"border-warning\">\n            <h5 className=\"fw-bold mb-0 text-warning\">\n              <i className=\"fas fa-exclamation-triangle me-2\"></i>\n              Low Stock Items ({lowStockProducts.length})\n            </h5>\n          </CardHeader>\n          <CardContent>\n            {lowStockProducts.length > 0 ? (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Product</th>\n                      <th>SKU</th>\n                      <th>Current Stock</th>\n                      <th>Min Required</th>\n                      <th>Status</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {lowStockProducts.map((product) => (\n                      <tr key={product.id}>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            {product.imageUrl ? (\n                              <img \n                                src={product.imageUrl} \n                                alt={product.name}\n                                className=\"me-3 rounded\" \n                                style={{ width: \"40px\", height: \"40px\", objectFit: \"cover\" }}\n                              />\n                            ) : (\n                              <div \n                                className=\"me-3 rounded bg-light d-flex align-items-center justify-content-center\"\n                                style={{ width: \"40px\", height: \"40px\" }}\n                              >\n                                <i className=\"fas fa-box text-muted\"></i>\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"fw-semibold\">{product.name}</div>\n                              {product.brand && (\n                                <small className=\"text-muted\">{product.brand}</small>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                        <td><code className=\"small\">{product.sku}</code></td>\n                        <td>\n                          <span className=\"text-warning fw-bold\">{product.stock}</span>\n                          <small className=\"text-muted\"> {product.unit}</small>\n                        </td>\n                        <td>{product.minStock || 5} {product.unit}</td>\n                        <td>\n                          <span className=\"badge bg-warning\">Low Stock</span>\n                        </td>\n                        <td>\n                          <Button size=\"sm\" className=\"btn-warning\">\n                            <i className=\"fas fa-plus me-1\"></i>Restock\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-4\">\n                <i className=\"fas fa-check-circle text-success fs-1 mb-3\"></i>\n                <p>All items have healthy stock levels!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8298},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/shopkeeper/AddCustomer.jsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AddCustomer() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\",\n    shopId: 1, // This should be dynamically set based on the shopkeeper's shop\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData) => {\n      return apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer added successfully!\",\n      });\n      setLocation(\"/shopkeeper/customers\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim() || !formData.phone.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in customer name and phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createCustomerMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Add New Customer</h2>\n            <p className=\"text-muted mb-0\">Add a new customer to your database</p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"fw-bold mb-0\">Customer Information</h5>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit}>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"customerName\">Customer Name *</Label>\n                      <Input\n                        id=\"customerName\"\n                        type=\"text\"\n                        value={formData.name}\n                        onChange={(e) => handleInputChange('name', e.target.value)}\n                        placeholder=\"Enter customer name\"\n                        required\n                        data-testid=\"input-customer-name\"\n                      />\n                    </div>\n                    \n                    <div className=\"col-md-6 mb-3\">\n                      <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n                      <Input\n                        id=\"customerPhone\"\n                        type=\"tel\"\n                        value={formData.phone}\n                        onChange={(e) => handleInputChange('phone', e.target.value)}\n                        placeholder=\"Enter phone number\"\n                        required\n                        data-testid=\"input-customer-phone\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mb-3\">\n                      <Label htmlFor=\"customerEmail\">Email Address</Label>\n                      <Input\n                        id=\"customerEmail\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => handleInputChange('email', e.target.value)}\n                        placeholder=\"Enter email address (optional)\"\n                        data-testid=\"input-customer-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mb-3\">\n                      <Label htmlFor=\"customerAddress\">Address</Label>\n                      <Textarea\n                        id=\"customerAddress\"\n                        value={formData.address}\n                        onChange={(e) => handleInputChange('address', e.target.value)}\n                        placeholder=\"Enter customer address (optional)\"\n                        rows={3}\n                        data-testid=\"textarea-customer-address\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"d-flex gap-3 pt-3\">\n                    <Button \n                      type=\"submit\"\n                      disabled={createCustomerMutation.isPending}\n                      className=\"btn btn-primary\"\n                      data-testid=\"button-submit-customer\"\n                    >\n                      {createCustomerMutation.isPending ? (\n                        <>\n                          <div className=\"spinner-border spinner-border-sm me-2\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                          </div>\n                          Adding Customer...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-user-plus me-2\"></i>\n                          Add Customer\n                        </>\n                      )}\n                    </Button>\n                    \n                    <Button \n                      type=\"button\"\n                      variant=\"outline-secondary\"\n                      onClick={() => setLocation(\"/shopkeeper/customers\")}\n                      className=\"btn btn-outline-secondary\"\n                      data-testid=\"button-cancel\"\n                    >\n                      <i className=\"fas fa-times me-2\"></i>\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"col-md-4\">\n            <Card>\n              <CardHeader>\n                <h6 className=\"fw-bold mb-0\">\n                  <i className=\"fas fa-info-circle me-2\"></i>\n                  Customer Information\n                </h6>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-muted\">\n                  <p className=\"mb-2\">\n                    <strong>Required fields:</strong>\n                  </p>\n                  <ul className=\"list-unstyled mb-3\">\n                    <li><i className=\"fas fa-check text-primary me-2\"></i>Customer Name</li>\n                    <li><i className=\"fas fa-check text-primary me-2\"></i>Phone Number</li>\n                  </ul>\n                  \n                  <p className=\"mb-2\">\n                    <strong>Optional fields:</strong>\n                  </p>\n                  <ul className=\"list-unstyled mb-3\">\n                    <li><i className=\"fas fa-circle text-muted me-2\" style={{fontSize: \"8px\"}}></i>Email Address</li>\n                    <li><i className=\"fas fa-circle text-muted me-2\" style={{fontSize: \"8px\"}}></i>Address</li>\n                  </ul>\n                  \n                  <p className=\"small\">\n                    Adding customer information helps you track purchases and provide better service.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8060},"client/src/pages/shopkeeper/Billing.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Billing() {\n  const { toast } = useToast();\n  const [billItems, setBillItems] = useState([{ productId: \"\", quantity: 1, price: 0 }]);\n  const [customerInfo, setCustomerInfo] = useState({\n    id: \"\",\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\"\n  });\n  const [customerSearch, setCustomerSearch] = useState(\"\");\n  const [showCustomerSuggestions, setShowCustomerSuggestions] = useState(false);\n  const [generatedBill, setGeneratedBill] = useState(null);\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers/search?q=\" + encodeURIComponent(customerSearch)],\n    enabled: customerSearch.length > 0\n  });\n\n  const createBillMutation = useMutation({\n    mutationFn: async (billData) => {\n      return apiRequest(\"POST\", \"/api/bills\", billData);\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setGeneratedBill(result);\n      toast({\n        title: \"Bill Created\",\n        description: `Bill ${result.billNumber} created successfully`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addBillItem = () => {\n    setBillItems([...billItems, { productId: \"\", quantity: 1, price: 0 }]);\n  };\n\n  const removeBillItem = (index) => {\n    setBillItems(billItems.filter((_, i) => i !== index));\n  };\n\n  const updateBillItem = (index, field, value) => {\n    const updatedItems = billItems.map((item, i) => {\n      if (i === index) {\n        if (field === 'productId') {\n          const selectedProduct = products.find(p => p.id === parseInt(value));\n          return { \n            ...item, \n            productId: value,\n            price: selectedProduct ? parseFloat(selectedProduct.price) : 0\n          };\n        }\n        return { ...item, [field]: field === 'quantity' ? parseInt(value) || 1 : value };\n      }\n      return item;\n    });\n    setBillItems(updatedItems);\n  };\n\n  const selectCustomer = (customer) => {\n    setCustomerInfo({\n      id: customer.id,\n      name: customer.name,\n      phone: customer.phone,\n      email: customer.email || \"\",\n      address: customer.address || \"\"\n    });\n    setCustomerSearch(customer.name);\n    setShowCustomerSuggestions(false);\n  };\n\n  const handleCustomerSearchChange = (value) => {\n    setCustomerSearch(value);\n    setCustomerInfo({\n      ...customerInfo,\n      name: value\n    });\n    setShowCustomerSuggestions(value.length > 0);\n  };\n\n  const getTotalAmount = () => {\n    return billItems.reduce((total, item) => {\n      return total + (item.price * item.quantity);\n    }, 0);\n  };\n\n  const generateBill = () => {\n    if (!customerInfo.name || !customerInfo.phone) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in customer name and phone\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const validItems = billItems.filter(item => item.productId && item.quantity > 0);\n    if (validItems.length === 0) {\n      toast({\n        title: \"No Items\",\n        description: \"Please add at least one product to the bill\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const subtotal = getTotalAmount();\n    const tax = subtotal * 0.1; // 10% tax\n    const total = subtotal + tax;\n\n    const billData = {\n      customer: customerInfo,\n      items: validItems.map(item => {\n        const product = products.find(p => p.id === parseInt(item.productId));\n        return {\n          productId: item.productId,\n          productName: product?.name || 'Unknown Product',\n          quantity: item.quantity,\n          price: item.price,\n          total: item.price * item.quantity\n        };\n      }),\n      subtotal,\n      tax,\n      total\n    };\n\n    createBillMutation.mutate(billData);\n  };\n\n  const printBill = () => {\n    window.print();\n  };\n\n  const resetForm = () => {\n    setBillItems([{ productId: \"\", quantity: 1, price: 0 }]);\n    setCustomerInfo({ id: \"\", name: \"\", phone: \"\", email: \"\", address: \"\" });\n    setCustomerSearch(\"\");\n    setGeneratedBill(null);\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        {!generatedBill ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <div>\n                <h2 className=\"fw-bold\">Create Bill</h2>\n                <p className=\"text-muted mb-0\">Generate customer bills and invoices</p>\n              </div>\n              <div className=\"d-flex gap-2\">\n                <span className=\"badge bg-primary fs-6\">\n                  Total: â‚¹{getTotalAmount().toFixed(2)}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Card className=\"mb-4\">\n                  <CardHeader>\n                    <h5 className=\"fw-bold mb-0\">Customer Information</h5>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"row\">\n                      <div className=\"col-md-12 mb-3 position-relative\">\n                        <Label htmlFor=\"customerSearch\">Customer Name *</Label>\n                        <Input\n                          id=\"customerSearch\"\n                          type=\"text\"\n                          value={customerSearch}\n                          onChange={(e) => handleCustomerSearchChange(e.target.value)}\n                          placeholder=\"Search existing customer or enter new name\"\n                          data-testid=\"input-customer-search\"\n                        />\n                        {showCustomerSuggestions && customers.length > 0 && (\n                          <div className=\"position-absolute w-100 bg-white border rounded shadow-sm mt-1\" style={{zIndex: 1000}}>\n                            {customers.slice(0, 5).map((customer) => (\n                              <div\n                                key={customer.id}\n                                className=\"p-2 cursor-pointer hover:bg-light\"\n                                onClick={() => selectCustomer(customer)}\n                                data-testid={`suggestion-customer-${customer.id}`}\n                              >\n                                <div className=\"fw-bold\">{customer.name}</div>\n                                <div className=\"small text-muted\">{customer.phone} â€¢ {customer.email}</div>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"col-md-6 mb-3\">\n                        <Label htmlFor=\"customerPhone\">Phone *</Label>\n                        <Input\n                          id=\"customerPhone\"\n                          type=\"tel\"\n                          value={customerInfo.phone}\n                          onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}\n                          placeholder=\"Phone number\"\n                          required\n                          data-testid=\"input-customer-phone\"\n                        />\n                      </div>\n                      \n                      <div className=\"col-md-6 mb-3\">\n                        <Label htmlFor=\"customerEmail\">Email</Label>\n                        <Input\n                          id=\"customerEmail\"\n                          type=\"email\"\n                          value={customerInfo.email}\n                          onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}\n                          placeholder=\"Email (optional)\"\n                          data-testid=\"input-customer-email\"\n                        />\n                      </div>\n                      \n                      <div className=\"col-md-12 mb-3\">\n                        <Label htmlFor=\"customerAddress\">Address</Label>\n                        <Input\n                          id=\"customerAddress\"\n                          type=\"text\"\n                          value={customerInfo.address}\n                          onChange={(e) => setCustomerInfo({...customerInfo, address: e.target.value})}\n                          placeholder=\"Address (optional)\"\n                          data-testid=\"input-customer-address\"\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"col-md-6\">\n                <Card className=\"mb-4\">\n                  <CardHeader>\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <h5 className=\"fw-bold mb-0\">Bill Items</h5>\n                      <Button\n                        onClick={addBillItem}\n                        size=\"sm\"\n                        className=\"btn btn-outline-primary btn-sm\"\n                        data-testid=\"button-add-item\"\n                      >\n                        <i className=\"fas fa-plus me-1\"></i>Add Item\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {billItems.map((item, index) => (\n                      <div key={index} className=\"row align-items-end mb-3 p-2 border rounded\" data-testid={`item-row-${index}`}>\n                        <div className=\"col-md-5\">\n                          <Label>Product</Label>\n                          <Select \n                            value={item.productId} \n                            onValueChange={(value) => updateBillItem(index, 'productId', value)}\n                            data-testid={`select-product-${index}`}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select product\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {products.map((product) => (\n                                <SelectItem key={product.id} value={product.id.toString()}>\n                                  {product.name} - â‚¹{product.price}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"col-md-3\">\n                          <Label>Qty</Label>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            value={item.quantity}\n                            onChange={(e) => updateBillItem(index, 'quantity', e.target.value)}\n                            data-testid={`input-quantity-${index}`}\n                          />\n                        </div>\n                        \n                        <div className=\"col-md-3\">\n                          <Label>Total</Label>\n                          <div className=\"fw-bold fs-6 pt-2\">\n                            â‚¹{(item.price * item.quantity).toFixed(2)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"col-md-1\">\n                          {billItems.length > 1 && (\n                            <Button\n                              onClick={() => removeBillItem(index)}\n                              variant=\"outline-danger\"\n                              size=\"sm\"\n                              className=\"btn btn-outline-danger btn-sm\"\n                              data-testid={`button-remove-item-${index}`}\n                            >\n                              <i className=\"fas fa-trash\"></i>\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    \n                    <div className=\"border-top pt-3 mt-3\">\n                      <div className=\"d-flex justify-content-between mb-2\">\n                        <span>Subtotal:</span>\n                        <span className=\"fw-bold\">â‚¹{getTotalAmount().toFixed(2)}</span>\n                      </div>\n                      <div className=\"d-flex justify-content-between mb-2\">\n                        <span>Tax (10%):</span>\n                        <span className=\"fw-bold\">â‚¹{(getTotalAmount() * 0.1).toFixed(2)}</span>\n                      </div>\n                      <div className=\"d-flex justify-content-between\">\n                        <span className=\"fw-bold fs-5\">Total:</span>\n                        <span className=\"fw-bold fs-5 text-primary\">\n                          â‚¹{(getTotalAmount() * 1.1).toFixed(2)}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"d-flex gap-3\">\n                  <Button\n                    onClick={generateBill}\n                    className=\"btn btn-primary flex-fill\"\n                    disabled={createBillMutation.isPending}\n                    data-testid=\"button-generate-bill\"\n                  >\n                    {createBillMutation.isPending ? (\n                      <>\n                        <div className=\"spinner-border spinner-border-sm me-2\" role=\"status\">\n                          <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                        Creating Bill...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-file-invoice me-2\"></i>\n                        Generate Bill\n                      </>\n                    )}\n                  </Button>\n                  \n                  <Button\n                    onClick={resetForm}\n                    variant=\"outline-secondary\"\n                    className=\"btn btn-outline-secondary\"\n                    data-testid=\"button-reset-form\"\n                  >\n                    <i className=\"fas fa-redo me-2\"></i>\n                    Reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center\">\n            {/* Bill Display */}\n            <div className=\"d-print-block d-none\">\n              <div className=\"bill-container mx-auto\" style={{maxWidth: '800px'}}>\n                <div className=\"text-center mb-4\">\n                  <h2 className=\"fw-bold\">Fresh Dairy Shop</h2>\n                  <p className=\"mb-1\">123 Main St, City</p>\n                  <p className=\"mb-3\">Phone: +1-234-567-8901</p>\n                  <hr />\n                </div>\n                \n                <div className=\"row mb-4\">\n                  <div className=\"col-md-6\">\n                    <strong>Bill To:</strong>\n                    <p className=\"mb-1\">{generatedBill.customer?.name}</p>\n                    <p className=\"mb-1\">{generatedBill.customer?.phone}</p>\n                    {generatedBill.customer?.email && <p className=\"mb-1\">{generatedBill.customer?.email}</p>}\n                    {generatedBill.customer?.address && <p className=\"mb-1\">{generatedBill.customer?.address}</p>}\n                  </div>\n                  <div className=\"col-md-6 text-end\">\n                    <strong>Bill #:</strong> {generatedBill.billNumber}<br />\n                    <strong>Date:</strong> {new Date(generatedBill.createdAt).toLocaleDateString()}\n                  </div>\n                </div>\n\n                <table className=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Product</th>\n                      <th>Qty</th>\n                      <th>Price</th>\n                      <th>Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {generatedBill.items?.map((item, index) => (\n                      <tr key={index}>\n                        <td>{item.productName}</td>\n                        <td>{item.quantity}</td>\n                        <td>â‚¹{parseFloat(item.price).toFixed(2)}</td>\n                        <td>â‚¹{parseFloat(item.total).toFixed(2)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                  <tfoot>\n                    <tr>\n                      <th colSpan=\"3\">Subtotal:</th>\n                      <th>â‚¹{parseFloat(generatedBill.subtotal).toFixed(2)}</th>\n                    </tr>\n                    <tr>\n                      <th colSpan=\"3\">Tax (10%):</th>\n                      <th>â‚¹{parseFloat(generatedBill.tax).toFixed(2)}</th>\n                    </tr>\n                    <tr>\n                      <th colSpan=\"3\">Total:</th>\n                      <th>â‚¹{parseFloat(generatedBill.total).toFixed(2)}</th>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n            </div>\n\n            <div className=\"d-print-none\">\n              <Card className=\"mx-auto\" style={{maxWidth: '800px'}}>\n                <CardHeader className=\"text-center\">\n                  <h3 className=\"fw-bold text-success\">\n                    <i className=\"fas fa-check-circle me-2\"></i>\n                    Bill Generated Successfully!\n                  </h3>\n                  <p className=\"text-muted\">Bill #{generatedBill.billNumber}</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"d-flex gap-3 justify-content-center\">\n                    <Button\n                      onClick={printBill}\n                      className=\"btn btn-primary\"\n                      data-testid=\"button-print-bill\"\n                    >\n                      <i className=\"fas fa-print me-2\"></i>\n                      Print Bill\n                    </Button>\n                    \n                    <Button\n                      onClick={resetForm}\n                      variant=\"outline-secondary\"\n                      className=\"btn btn-outline-secondary\"\n                      data-testid=\"button-new-bill\"\n                    >\n                      <i className=\"fas fa-plus me-2\"></i>\n                      New Bill\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19312},"client/src/pages/shopkeeper/Customers.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport ShopkeeperSidebar from \"@/components/Layout/ShopkeeperSidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: customers = [], isLoading } = useQuery({\n    queryKey: searchQuery \n      ? [\"/api/customers/search?q=\" + encodeURIComponent(searchQuery)]\n      : [\"/api/customers\"],\n  });\n\n  const { data: customerPurchases = {} } = useQuery({\n    queryKey: [\"/api/customers/purchases\"],\n  });\n\n  return (\n    <div className=\"min-h-screen d-flex\">\n      <ShopkeeperSidebar />\n      \n      <div className=\"main-content\">\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n          <div>\n            <h2 className=\"fw-bold\">Customer Management</h2>\n            <p className=\"text-muted mb-0\">View and manage your customers</p>\n          </div>\n          <Link href=\"/shopkeeper/add-customer\" className=\"btn btn-primary\">\n            <i className=\"fas fa-user-plus me-2\"></i>Add Customer\n          </Link>\n        </div>\n\n        <Card className=\"mb-4\">\n          <CardHeader>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <h5 className=\"fw-bold mb-0\">Search Customers</h5>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search by name, phone, or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-customers\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <h5 className=\"fw-bold mb-0\">Customer List ({customers.length})</h5>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              </div>\n            ) : customers.length > 0 ? (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th>Customer Details</th>\n                      <th>Contact Info</th>\n                      <th>Total Bills</th>\n                      <th>Total Spent</th>\n                      <th>Last Purchase</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {customers.map((customer) => {\n                      const purchases = customerPurchases[customer.id] || { bills: 0, total: 0, lastPurchase: null };\n                      return (\n                        <tr key={customer.id} data-testid={`row-customer-${customer.id}`}>\n                          <td>\n                            <div>\n                              <div className=\"fw-bold\">{customer.name}</div>\n                              {customer.address && (\n                                <small className=\"text-muted\">{customer.address}</small>\n                              )}\n                            </div>\n                          </td>\n                          <td>\n                            <div>\n                              <div><i className=\"fas fa-phone me-1\"></i>{customer.phone}</div>\n                              {customer.email && (\n                                <div><i className=\"fas fa-envelope me-1\"></i>{customer.email}</div>\n                              )}\n                            </div>\n                          </td>\n                          <td>\n                            <span className=\"badge bg-info\">{purchases.bills} bills</span>\n                          </td>\n                          <td>\n                            <span className=\"fw-bold text-success\">${purchases.total.toFixed(2)}</span>\n                          </td>\n                          <td>\n                            {purchases.lastPurchase ? (\n                              <span className=\"text-muted\">\n                                {new Date(purchases.lastPurchase).toLocaleDateString()}\n                              </span>\n                            ) : (\n                              <span className=\"text-muted\">No purchases</span>\n                            )}\n                          </td>\n                          <td>\n                            <div className=\"d-flex gap-1\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline-info\"\n                                className=\"btn btn-outline-info btn-sm\"\n                                onClick={() => {\n                                  // View customer details functionality\n                                  alert(`Customer Details:\\nName: ${customer.name}\\nPhone: ${customer.phone}\\nEmail: ${customer.email || 'N/A'}\\nAddress: ${customer.address || 'N/A'}`);\n                                }}\n                                data-testid={`button-view-customer-${customer.id}`}\n                              >\n                                <i className=\"fas fa-eye\"></i>\n                              </Button>\n                              <Link \n                                href={`/shopkeeper/billing?customer=${customer.id}`} \n                                className=\"btn btn-outline-primary btn-sm\"\n                                data-testid={`button-bill-customer-${customer.id}`}\n                              >\n                                <i className=\"fas fa-file-invoice\"></i>\n                              </Link>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center text-muted py-5\">\n                <i className=\"fas fa-users fs-1 mb-3\"></i>\n                <p>No customers found</p>\n                {searchQuery ? (\n                  <div>\n                    <small>No customers match your search criteria</small>\n                    <br />\n                    <Button\n                      variant=\"outline-secondary\"\n                      size=\"sm\"\n                      onClick={() => setSearchQuery(\"\")}\n                      className=\"btn btn-outline-secondary btn-sm mt-2\"\n                    >\n                      Clear Search\n                    </Button>\n                  </div>\n                ) : (\n                  <div>\n                    <small>Add your first customer to get started</small>\n                    <br />\n                    <Link href=\"/shopkeeper/add-customer\" className=\"btn btn-primary btn-sm mt-2\">\n                      <i className=\"fas fa-user-plus me-1\"></i>Add Customer\n                    </Link>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7560}},"version":1}